{"ast":null,"code":"var _jsxFileName = \"/home/fernando/Documents/develop/www/cpvl/v4_cpvl_2025/cpvl-spa/src/components/PaymentQRCode/PaymentQRCode.component.tsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport QRCode from 'qrcode';\nimport { FormControl, InputLabel, MenuItem, Select, Typography } from '@mui/material';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst pix_key_cpvl = process.env.PIX_KEY_CPVL;\nexport const PaymentQRCode = _ref => {\n  _s();\n  let {\n    valor,\n    totalMissing\n  } = _ref;\n  const {\n    userId\n  } = useParams();\n  const [qrCodeImage, setQrCodeImage] = useState('');\n  const [selectedPaymentType, setSelectedPaymentType] = useState('');\n  // const [paymentLink, setPaymentLink] = useState<string>('');\n\n  useEffect(() => {\n    const paymentUrl = `${pix_key_cpvl}${valor}&descricao=PagamentoExemplo`;\n\n    // Gerando o QR Code quando o valor mudar\n    QRCode.toDataURL(paymentUrl).then(qrCode => {\n      setQrCodeImage(qrCode);\n      setPaymentLink(paymentUrl);\n    }).catch(err => {\n      console.error('Erro ao gerar o QR Code:', err);\n    });\n  }, [valor]); // Sempre que o valor mudar, o QR Code será atualizado\n\n  const paymentType = totalMissing => {\n    if (totalMissing === undefined || totalMissing < 0 || totalMissing > 12) {\n      return [];\n    }\n    const types = [];\n\n    // Monthly is always possible if there are missing months\n    if (totalMissing > 0) {\n      types.push('mensal');\n    }\n\n    // Quarterly possible if missing 3+ months\n    if (totalMissing >= 3) {\n      types.push('trimestral');\n    }\n\n    // Semi-annual possible if missing 6+ months  \n    if (totalMissing >= 6) {\n      types.push('semestral');\n    }\n\n    // Annual only if all 12 months are missing\n    if (totalMissing === 12) {\n      types.push('anual');\n    }\n    return types;\n  };\n  const handleChange = event => {\n    setSelectedPaymentType(event.target.value);\n  };\n  const availableTypes = paymentType(totalMissing);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [totalMissing > 0 && /*#__PURE__*/_jsxDEV(Typography, {\n      variant: \"body1\",\n      sx: {\n        mb: 1\n      },\n      children: [\"Faltam \", totalMissing, \" meses.\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(FormControl, {\n      sx: {\n        minWidth: 300\n      },\n      children: [/*#__PURE__*/_jsxDEV(InputLabel, {\n        id: \"tipoPagamento\",\n        children: \"Tipo do pagamento:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Select, {\n        labelId: \"tipoPagamento\",\n        id: \"tipopagamento\",\n        value: selectedPaymentType,\n        label: \"Tipo do pagamento\",\n        onChange: handleChange,\n        disabled: availableTypes.length === 0,\n        children: availableTypes.length === 0 ? /*#__PURE__*/_jsxDEV(MenuItem, {\n          value: \"\",\n          disabled: true,\n          children: \"Nenhuma op\\xE7\\xE3o dispon\\xEDvel\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 94,\n          columnNumber: 13\n        }, this) : availableTypes.map((type, index) => /*#__PURE__*/_jsxDEV(MenuItem, {\n          value: type,\n          children: type.charAt(0).toUpperCase() + type.slice(1)\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 99,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Typography, {\n      variant: \"body1\",\n      sx: {\n        mt: 2\n      },\n      children: \"Escaneie o QR Code abaixo para efetuar o pagamento.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 7\n    }, this), qrCodeImage && /*#__PURE__*/_jsxDEV(\"img\", {\n      src: qrCodeImage,\n      alt: \"QR Code de Pagamento mensalidade CPVL\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 8\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Ou copie o link abaixo:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      value: paymentLink,\n      readOnly: true,\n      style: {\n        width: '100%',\n        padding: '8px',\n        marginTop: '8px'\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 77,\n    columnNumber: 5\n  }, this);\n};\n_s(PaymentQRCode, \"bv4cxKMFehS6p7BPbhy2b97TNcU=\", false, function () {\n  return [useParams];\n});\n_c = PaymentQRCode;\nfunction setPaymentLink(paymentUrl) {\n  throw new Error('Function not implemented.');\n}\nvar _c;\n$RefreshReg$(_c, \"PaymentQRCode\");","map":{"version":3,"names":["React","useEffect","useState","useParams","QRCode","FormControl","InputLabel","MenuItem","Select","Typography","jsxDEV","_jsxDEV","pix_key_cpvl","process","env","PIX_KEY_CPVL","PaymentQRCode","_ref","_s","valor","totalMissing","userId","qrCodeImage","setQrCodeImage","selectedPaymentType","setSelectedPaymentType","paymentUrl","toDataURL","then","qrCode","setPaymentLink","catch","err","console","error","paymentType","undefined","types","push","handleChange","event","target","value","availableTypes","children","variant","sx","mb","fileName","_jsxFileName","lineNumber","columnNumber","minWidth","id","labelId","label","onChange","disabled","length","map","type","index","charAt","toUpperCase","slice","mt","src","alt","paymentLink","readOnly","style","width","padding","marginTop","_c","Error","$RefreshReg$"],"sources":["/home/fernando/Documents/develop/www/cpvl/v4_cpvl_2025/cpvl-spa/src/components/PaymentQRCode/PaymentQRCode.component.tsx"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport QRCode from 'qrcode';\nimport {\n  FormControl,\n  InputLabel,\n  MenuItem,\n  Select,\n  SelectChangeEvent,\n  Typography\n} from '@mui/material';\n\nconst pix_key_cpvl = process.env.PIX_KEY_CPVL;\n\ninterface PaymentProps {\n  valor: number;\n  totalMissing: number;\n}\n\nexport const PaymentQRCode: React.FC<PaymentProps> = ({ valor, totalMissing }) => {\n  const { userId } = useParams<{ userId: string }>();\n  const [qrCodeImage, setQrCodeImage] = useState<string>('');\n  const [selectedPaymentType, setSelectedPaymentType] = useState<string>('');\n  // const [paymentLink, setPaymentLink] = useState<string>('');\n\n  useEffect(() => {\n    const paymentUrl = `${pix_key_cpvl}${valor}&descricao=PagamentoExemplo`;\n\n    // Gerando o QR Code quando o valor mudar\n    QRCode.toDataURL(paymentUrl)\n      .then((qrCode: React.SetStateAction<string>) => {\n        setQrCodeImage(qrCode);\n        setPaymentLink(paymentUrl);\n      })\n      .catch((err: undefined) => {\n        console.error('Erro ao gerar o QR Code:', err);\n      });\n  }, [valor]); // Sempre que o valor mudar, o QR Code será atualizado\n\n  const paymentType = (totalMissing: number | undefined): string[] => {\n    if (totalMissing === undefined || totalMissing < 0 || totalMissing > 12) {\n      return [];\n    }\n\n    const types: string[] = [];\n\n    // Monthly is always possible if there are missing months\n    if (totalMissing > 0) {\n      types.push('mensal');\n    }\n\n    // Quarterly possible if missing 3+ months\n    if (totalMissing >= 3) {\n      types.push('trimestral');\n    }\n\n    // Semi-annual possible if missing 6+ months  \n    if (totalMissing >= 6) {\n      types.push('semestral');\n    }\n\n    // Annual only if all 12 months are missing\n    if (totalMissing === 12) {\n      types.push('anual');\n    }\n\n    return types;\n  };\n\n  const handleChange = (event: SelectChangeEvent<string>) => {\n    setSelectedPaymentType(event.target.value);\n  };\n\n  const availableTypes = paymentType(totalMissing);\n\n  return (\n    <div>\n      {totalMissing > 0 && (\n        <Typography variant=\"body1\" sx={{ mb: 1 }}>\n          Faltam {totalMissing} meses.\n        </Typography>\n      )}\n      <FormControl sx={{ minWidth: 300 }}>\n        <InputLabel id=\"tipoPagamento\">Tipo do pagamento:</InputLabel>\n        <Select\n          labelId=\"tipoPagamento\"\n          id=\"tipopagamento\"\n          value={selectedPaymentType}\n          label=\"Tipo do pagamento\"\n          onChange={handleChange}\n          disabled={availableTypes.length === 0}\n        >\n          {availableTypes.length === 0 ? (\n            <MenuItem value=\"\" disabled>\n              Nenhuma opção disponível\n            </MenuItem>\n          ) : (\n            availableTypes.map((type: string, index: number) => (\n              <MenuItem key={index} value={type}>\n                {type.charAt(0).toUpperCase() + type.slice(1)}\n              </MenuItem>\n            ))\n          )}\n        </Select>\n      </FormControl>\n      \n      <Typography variant=\"body1\" sx={{ mt: 2 }}>\n        Escaneie o QR Code abaixo para efetuar o pagamento.\n      </Typography>\n      {qrCodeImage && (\n        <img src={qrCodeImage} alt=\"QR Code de Pagamento mensalidade CPVL\" />\n      )}\n       <br />\n      <p>Ou copie o link abaixo:</p>\n      <input\n        type=\"text\"\n        value={paymentLink}\n        readOnly\n        style={{ width: '100%', padding: '8px', marginTop: '8px' }}\n      /> \n    </div>\n  );\n};\n\nfunction setPaymentLink(paymentUrl: string) {\n  throw new Error('Function not implemented.');\n}\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,SAASC,SAAS,QAAQ,kBAAkB;AAC5C,OAAOC,MAAM,MAAM,QAAQ;AAC3B,SACEC,WAAW,EACXC,UAAU,EACVC,QAAQ,EACRC,MAAM,EAENC,UAAU,QACL,eAAe;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEvB,MAAMC,YAAY,GAAGC,OAAO,CAACC,GAAG,CAACC,YAAY;AAO7C,OAAO,MAAMC,aAAqC,GAAGC,IAAA,IAA6B;EAAAC,EAAA;EAAA,IAA5B;IAAEC,KAAK;IAAEC;EAAa,CAAC,GAAAH,IAAA;EAC3E,MAAM;IAAEI;EAAO,CAAC,GAAGlB,SAAS,CAAqB,CAAC;EAClD,MAAM,CAACmB,WAAW,EAAEC,cAAc,CAAC,GAAGrB,QAAQ,CAAS,EAAE,CAAC;EAC1D,MAAM,CAACsB,mBAAmB,EAAEC,sBAAsB,CAAC,GAAGvB,QAAQ,CAAS,EAAE,CAAC;EAC1E;;EAEAD,SAAS,CAAC,MAAM;IACd,MAAMyB,UAAU,GAAG,GAAGd,YAAY,GAAGO,KAAK,6BAA6B;;IAEvE;IACAf,MAAM,CAACuB,SAAS,CAACD,UAAU,CAAC,CACzBE,IAAI,CAAEC,MAAoC,IAAK;MAC9CN,cAAc,CAACM,MAAM,CAAC;MACtBC,cAAc,CAACJ,UAAU,CAAC;IAC5B,CAAC,CAAC,CACDK,KAAK,CAAEC,GAAc,IAAK;MACzBC,OAAO,CAACC,KAAK,CAAC,0BAA0B,EAAEF,GAAG,CAAC;IAChD,CAAC,CAAC;EACN,CAAC,EAAE,CAACb,KAAK,CAAC,CAAC,CAAC,CAAC;;EAEb,MAAMgB,WAAW,GAAIf,YAAgC,IAAe;IAClE,IAAIA,YAAY,KAAKgB,SAAS,IAAIhB,YAAY,GAAG,CAAC,IAAIA,YAAY,GAAG,EAAE,EAAE;MACvE,OAAO,EAAE;IACX;IAEA,MAAMiB,KAAe,GAAG,EAAE;;IAE1B;IACA,IAAIjB,YAAY,GAAG,CAAC,EAAE;MACpBiB,KAAK,CAACC,IAAI,CAAC,QAAQ,CAAC;IACtB;;IAEA;IACA,IAAIlB,YAAY,IAAI,CAAC,EAAE;MACrBiB,KAAK,CAACC,IAAI,CAAC,YAAY,CAAC;IAC1B;;IAEA;IACA,IAAIlB,YAAY,IAAI,CAAC,EAAE;MACrBiB,KAAK,CAACC,IAAI,CAAC,WAAW,CAAC;IACzB;;IAEA;IACA,IAAIlB,YAAY,KAAK,EAAE,EAAE;MACvBiB,KAAK,CAACC,IAAI,CAAC,OAAO,CAAC;IACrB;IAEA,OAAOD,KAAK;EACd,CAAC;EAED,MAAME,YAAY,GAAIC,KAAgC,IAAK;IACzDf,sBAAsB,CAACe,KAAK,CAACC,MAAM,CAACC,KAAK,CAAC;EAC5C,CAAC;EAED,MAAMC,cAAc,GAAGR,WAAW,CAACf,YAAY,CAAC;EAEhD,oBACET,OAAA;IAAAiC,QAAA,GACGxB,YAAY,GAAG,CAAC,iBACfT,OAAA,CAACF,UAAU;MAACoC,OAAO,EAAC,OAAO;MAACC,EAAE,EAAE;QAAEC,EAAE,EAAE;MAAE,CAAE;MAAAH,QAAA,GAAC,SAClC,EAACxB,YAAY,EAAC,SACvB;IAAA;MAAA4B,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAY,CACb,eACDxC,OAAA,CAACN,WAAW;MAACyC,EAAE,EAAE;QAAEM,QAAQ,EAAE;MAAI,CAAE;MAAAR,QAAA,gBACjCjC,OAAA,CAACL,UAAU;QAAC+C,EAAE,EAAC,eAAe;QAAAT,QAAA,EAAC;MAAkB;QAAAI,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAY,CAAC,eAC9DxC,OAAA,CAACH,MAAM;QACL8C,OAAO,EAAC,eAAe;QACvBD,EAAE,EAAC,eAAe;QAClBX,KAAK,EAAElB,mBAAoB;QAC3B+B,KAAK,EAAC,mBAAmB;QACzBC,QAAQ,EAAEjB,YAAa;QACvBkB,QAAQ,EAAEd,cAAc,CAACe,MAAM,KAAK,CAAE;QAAAd,QAAA,EAErCD,cAAc,CAACe,MAAM,KAAK,CAAC,gBAC1B/C,OAAA,CAACJ,QAAQ;UAACmC,KAAK,EAAC,EAAE;UAACe,QAAQ;UAAAb,QAAA,EAAC;QAE5B;UAAAI,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAU,CAAC,GAEXR,cAAc,CAACgB,GAAG,CAAC,CAACC,IAAY,EAAEC,KAAa,kBAC7ClD,OAAA,CAACJ,QAAQ;UAAamC,KAAK,EAAEkB,IAAK;UAAAhB,QAAA,EAC/BgB,IAAI,CAACE,MAAM,CAAC,CAAC,CAAC,CAACC,WAAW,CAAC,CAAC,GAAGH,IAAI,CAACI,KAAK,CAAC,CAAC;QAAC,GADhCH,KAAK;UAAAb,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAEV,CACX;MACF;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACK,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACE,CAAC,eAEdxC,OAAA,CAACF,UAAU;MAACoC,OAAO,EAAC,OAAO;MAACC,EAAE,EAAE;QAAEmB,EAAE,EAAE;MAAE,CAAE;MAAArB,QAAA,EAAC;IAE3C;MAAAI,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAY,CAAC,EACZ7B,WAAW,iBACVX,OAAA;MAAKuD,GAAG,EAAE5C,WAAY;MAAC6C,GAAG,EAAC;IAAuC;MAAAnB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CACrE,eACAxC,OAAA;MAAAqC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CAAC,eACPxC,OAAA;MAAAiC,QAAA,EAAG;IAAuB;MAAAI,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAG,CAAC,eAC9BxC,OAAA;MACEiD,IAAI,EAAC,MAAM;MACXlB,KAAK,EAAE0B,WAAY;MACnBC,QAAQ;MACRC,KAAK,EAAE;QAAEC,KAAK,EAAE,MAAM;QAAEC,OAAO,EAAE,KAAK;QAAEC,SAAS,EAAE;MAAM;IAAE;MAAAzB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC5D,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACC,CAAC;AAEV,CAAC;AAACjC,EAAA,CAvGWF,aAAqC;EAAA,QAC7Bb,SAAS;AAAA;AAAAuE,EAAA,GADjB1D,aAAqC;AAyGlD,SAASc,cAAcA,CAACJ,UAAkB,EAAE;EAC1C,MAAM,IAAIiD,KAAK,CAAC,2BAA2B,CAAC;AAC9C;AAAC,IAAAD,EAAA;AAAAE,YAAA,CAAAF,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}