{"ast":null,"code":"// import { useEffect, useRef, useState } from 'react';\n// import { useFetch as tsUseFetch, useLocalStorage } from 'usehooks-ts';\n// import { getHeaderOptions } from '../services';\n// import { useNavigate } from 'react-router-dom';\n\n// interface IProps {\n//   method?: 'POST' | 'GET' | 'PUT' | 'DELETE';\n//   url?: string;\n//   body?: any;\n//   options?: RequestInit;\n// }\n\n// const useFetch = <T>({ method = 'GET', url, body, options }: IProps) => {\n//   const [loading, setLoading] = useState(false);\n//   const [, setIsLogged] = useLocalStorage(\n//     process.env.REACT_APP_LOGGED_KEY,\n//     false\n//   );\n//   const navigate = useNavigate();\n//   const [fetchURL, setFetchURL] = useState<string | undefined>(url);\n//   const postBody = useRef(body);\n//   const { data, error } = tsUseFetch<T>(fetchURL ? fetchURL : undefined, {\n//     method,\n//     ...(postBody.current && { body: JSON.stringify(postBody.current) }),\n//     ...getHeaderOptions(),\n//     ...options\n//   });\n\n//   const normalizedData = data && (data as any).data ? (data as any).data : data;\n\n//   const doFetch = ({ url, body }: { url: string; body: any }) => {\n//     if (body) {\n//       postBody.current = body;\n//     }\n//     setFetchURL(url);\n//   };\n\n//   useEffect(() => {\n//     if (error) {\n//       if (error.message === 'Unauthorized') {\n//         setIsLogged(false);\n//       }\n//       if (error.message === 'Forbidden resource') {\n//         navigate('/');\n//       }\n//       setFetchURL(undefined);\n//     }\n//   }, [error, navigate, setIsLogged]);\n\n//   return { doFetch, data: normalizedData as T, error, loading };\n// };\n\n// export default useFetch;","map":{"version":3,"names":[],"sources":["/home/fernando/Documents/develop/www/cpvl/v4_cpvl_2025/cpvl-spa/src/hooks/useFetch.ts"],"sourcesContent":["// import { useEffect, useRef, useState } from 'react';\n// import { useFetch as tsUseFetch, useLocalStorage } from 'usehooks-ts';\n// import { getHeaderOptions } from '../services';\n// import { useNavigate } from 'react-router-dom';\n\n// interface IProps {\n//   method?: 'POST' | 'GET' | 'PUT' | 'DELETE';\n//   url?: string;\n//   body?: any;\n//   options?: RequestInit;\n// }\n\n// const useFetch = <T>({ method = 'GET', url, body, options }: IProps) => {\n//   const [loading, setLoading] = useState(false);\n//   const [, setIsLogged] = useLocalStorage(\n//     process.env.REACT_APP_LOGGED_KEY,\n//     false\n//   );\n//   const navigate = useNavigate();\n//   const [fetchURL, setFetchURL] = useState<string | undefined>(url);\n//   const postBody = useRef(body);\n//   const { data, error } = tsUseFetch<T>(fetchURL ? fetchURL : undefined, {\n//     method,\n//     ...(postBody.current && { body: JSON.stringify(postBody.current) }),\n//     ...getHeaderOptions(),\n//     ...options\n//   });\n\n//   const normalizedData = data && (data as any).data ? (data as any).data : data;\n\n//   const doFetch = ({ url, body }: { url: string; body: any }) => {\n//     if (body) {\n//       postBody.current = body;\n//     }\n//     setFetchURL(url);\n//   };\n\n//   useEffect(() => {\n//     if (error) {\n//       if (error.message === 'Unauthorized') {\n//         setIsLogged(false);\n//       }\n//       if (error.message === 'Forbidden resource') {\n//         navigate('/');\n//       }\n//       setFetchURL(undefined);\n//     }\n//   }, [error, navigate, setIsLogged]);\n\n//   return { doFetch, data: normalizedData as T, error, loading };\n// };\n\n// export default useFetch;\n"],"mappings":"AAAA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}