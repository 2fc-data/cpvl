{"ast":null,"code":"var _jsxFileName = \"/home/fernando/Documents/develop/www/cpvl/v4_cpvl_2025/cpvl-spa/src/components/PaymentChechbox/PaymentCheckbox.component.tsx\",\n  _s = $RefreshSig$();\nimport { useState } from 'react';\nimport { useFetch } from '../../hooks/';\nimport { useParams } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const PaymentCheckbox = () => {\n  _s();\n  const {\n    userId\n  } = useParams();\n  const {\n    doFetch,\n    loading\n  } = useFetch({\n    method: 'POST'\n  });\n  const [selectedMonths, setSelectedMonths] = useState([]);\n  const handleCheckboxChange = month => {\n    setSelectedMonths(prev => prev.includes(month) ? prev.filter(m => m !== month) : [...prev, month]);\n  };\n\n  // quando marcar o checkbox → insere na tabela\n  const handleChange = async () => {\n    const newChecked = !checked;\n    setChecked(newChecked);\n    if (newChecked) {\n      await doFetch({\n        url: `${process.env.REACT_APP_API_URL}/paymentMonthly`,\n        body: {\n          userId,\n          amount: 50,\n          // valor fixo ao marcar\n          ref_year: new Date().getFullYear(),\n          ref_month: new Date().getMonth() + 1,\n          type: 'mensal',\n          description: 'Pagamento manual via checkbox',\n          date: new Date()\n        },\n        method: 'POST'\n      });\n    }\n  };\n  useEffect(() => {\n    if (data && data.amount > 50) {\n      setChecked(true);\n    }\n  }, [data]);\n  return /*#__PURE__*/_jsxDEV(\"label\", {\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"checkbox\",\n      checked: checked,\n      onChange: handleChange,\n      disabled: loading\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 7\n    }, this), \"Pagamento\"]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 62,\n    columnNumber: 5\n  }, this);\n};\n_s(PaymentCheckbox, \"fxq0VP3nTe9nM/iImqAOry75XdM=\", false, function () {\n  return [useParams, useFetch];\n});\n_c = PaymentCheckbox;\nvar _c;\n$RefreshReg$(_c, \"PaymentCheckbox\");","map":{"version":3,"names":["useState","useFetch","useParams","jsxDEV","_jsxDEV","PaymentCheckbox","_s","userId","doFetch","loading","method","selectedMonths","setSelectedMonths","handleCheckboxChange","month","prev","includes","filter","m","handleChange","newChecked","checked","setChecked","url","process","env","REACT_APP_API_URL","body","amount","ref_year","Date","getFullYear","ref_month","getMonth","type","description","date","useEffect","data","children","onChange","disabled","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/home/fernando/Documents/develop/www/cpvl/v4_cpvl_2025/cpvl-spa/src/components/PaymentChechbox/PaymentCheckbox.component.tsx"],"sourcesContent":["import { useState } from 'react';\nimport { useFetch } from '../../hooks/';\nimport { useParams } from 'react-router-dom';\nimport { API, getURI } from '../../services';\nimport { Button, Box } from '@mui/material';\n\ninterface PaymentMonthly {\n  id: number;\n  userId: number;\n  amount: number;\n  ref_year: number;\n  ref_month: number;\n  type?: string;\n  description?: string;\n  date?: string;\n}\n\nexport const PaymentCheckbox: React.FC = () => {\n  const { userId } = useParams<{ userId: string }>();\n  const { doFetch, loading } = useFetch<PaymentMonthly>({\n    method: 'POST'\n  });\n  const [selectedMonths, setSelectedMonths] = useState<number[]>([]);\n\n  const handleCheckboxChange = (month: number) => {\n    setSelectedMonths((prev) =>\n      prev.includes(month)\n        ? prev.filter((m) => m !== month)\n        : [...prev, month]\n    );\n  };\n\n  // quando marcar o checkbox → insere na tabela\n  const handleChange = async () => {\n    const newChecked = !checked;\n    setChecked(newChecked);\n\n    if (newChecked) {\n      await doFetch({\n        url: `${process.env.REACT_APP_API_URL}/paymentMonthly`,\n        body: {\n          userId,\n          amount: 50, // valor fixo ao marcar\n          ref_year: new Date().getFullYear(),\n          ref_month: new Date().getMonth() + 1,\n          type: 'mensal',\n          description: 'Pagamento manual via checkbox',\n          date: new Date()\n        },\n        method: 'POST'\n      });\n    }\n  };\n\n  useEffect(() => {\n    if (data && data.amount > 50) {\n      setChecked(true);\n    }\n  }, [data]);\n\n  return (\n    <label>\n      <input\n        type=\"checkbox\"\n        checked={checked}\n        onChange={handleChange}\n        disabled={loading}\n      />\n      Pagamento\n    </label>\n  );\n};\n"],"mappings":";;AAAA,SAASA,QAAQ,QAAQ,OAAO;AAChC,SAASC,QAAQ,QAAQ,cAAc;AACvC,SAASC,SAAS,QAAQ,kBAAkB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAe7C,OAAO,MAAMC,eAAyB,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC7C,MAAM;IAAEC;EAAO,CAAC,GAAGL,SAAS,CAAqB,CAAC;EAClD,MAAM;IAAEM,OAAO;IAAEC;EAAQ,CAAC,GAAGR,QAAQ,CAAiB;IACpDS,MAAM,EAAE;EACV,CAAC,CAAC;EACF,MAAM,CAACC,cAAc,EAAEC,iBAAiB,CAAC,GAAGZ,QAAQ,CAAW,EAAE,CAAC;EAElE,MAAMa,oBAAoB,GAAIC,KAAa,IAAK;IAC9CF,iBAAiB,CAAEG,IAAI,IACrBA,IAAI,CAACC,QAAQ,CAACF,KAAK,CAAC,GAChBC,IAAI,CAACE,MAAM,CAAEC,CAAC,IAAKA,CAAC,KAAKJ,KAAK,CAAC,GAC/B,CAAC,GAAGC,IAAI,EAAED,KAAK,CACrB,CAAC;EACH,CAAC;;EAED;EACA,MAAMK,YAAY,GAAG,MAAAA,CAAA,KAAY;IAC/B,MAAMC,UAAU,GAAG,CAACC,OAAO;IAC3BC,UAAU,CAACF,UAAU,CAAC;IAEtB,IAAIA,UAAU,EAAE;MACd,MAAMZ,OAAO,CAAC;QACZe,GAAG,EAAE,GAAGC,OAAO,CAACC,GAAG,CAACC,iBAAiB,iBAAiB;QACtDC,IAAI,EAAE;UACJpB,MAAM;UACNqB,MAAM,EAAE,EAAE;UAAE;UACZC,QAAQ,EAAE,IAAIC,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC,CAAC;UAClCC,SAAS,EAAE,IAAIF,IAAI,CAAC,CAAC,CAACG,QAAQ,CAAC,CAAC,GAAG,CAAC;UACpCC,IAAI,EAAE,QAAQ;UACdC,WAAW,EAAE,+BAA+B;UAC5CC,IAAI,EAAE,IAAIN,IAAI,CAAC;QACjB,CAAC;QACDpB,MAAM,EAAE;MACV,CAAC,CAAC;IACJ;EACF,CAAC;EAED2B,SAAS,CAAC,MAAM;IACd,IAAIC,IAAI,IAAIA,IAAI,CAACV,MAAM,GAAG,EAAE,EAAE;MAC5BN,UAAU,CAAC,IAAI,CAAC;IAClB;EACF,CAAC,EAAE,CAACgB,IAAI,CAAC,CAAC;EAEV,oBACElC,OAAA;IAAAmC,QAAA,gBACEnC,OAAA;MACE8B,IAAI,EAAC,UAAU;MACfb,OAAO,EAAEA,OAAQ;MACjBmB,QAAQ,EAAErB,YAAa;MACvBsB,QAAQ,EAAEhC;IAAQ;MAAAiC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACnB,CAAC,aAEJ;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAO,CAAC;AAEZ,CAAC;AAACvC,EAAA,CAtDWD,eAAyB;EAAA,QACjBH,SAAS,EACCD,QAAQ;AAAA;AAAA6C,EAAA,GAF1BzC,eAAyB;AAAA,IAAAyC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}