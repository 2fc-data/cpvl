{"ast":null,"code":"var _s = $RefreshSig$();\n// import { useEffect, useRef, useState } from 'react';\n// import { useFetch as tsUseFetch, useLocalStorage } from 'usehooks-ts';\n// import { getHeaderOptions } from '../services';\n// import { useNavigate } from 'react-router-dom';\n\n// interface IProps {\n//   method?: 'POST' | 'GET' | 'PUT' | 'DELETE';\n//   url?: string;\n//   body?: any;\n//   options?: RequestInit;\n// }\n\n// const useFetch = <T>({ method = 'GET', url, body, options }: IProps) => {\n//   const [loading, setLoading] = useState(false);\n//   const [, setIsLogged] = useLocalStorage(\n//     process.env.REACT_APP_LOGGED_KEY,\n//     false\n//   );\n//   const navigate = useNavigate();\n//   const [fetchURL, setFetchURL] = useState<string | undefined>(url);\n//   const postBody = useRef(body);\n//   const { data, error } = tsUseFetch<T>(fetchURL ? fetchURL : undefined, {\n//     method,\n//     ...(postBody.current && { body: JSON.stringify(postBody.current) }),\n//     ...getHeaderOptions(),\n//     ...options\n//   });\n\n//   const doFetch = ({ url, body }: { url: string; body: any }) => {\n//     if (body) {\n//       postBody.current = body;\n//     }\n//     setFetchURL(url);\n//   };\n\n//   useEffect(() => {\n//     if (error) {\n//       if (error.message === 'Unauthorized') {\n//         setIsLogged(false);\n//       }\n//       if (error.message === 'Forbidden resource') {\n//         navigate('/');\n//       }\n//       setFetchURL(undefined);\n//     }\n//   }, [error, navigate, setIsLogged]);\n\n//   return { doFetch, data, error, loading };\n// };\n\n// export default useFetch;\nimport { useEffect, useRef, useState } from 'react';\nimport { useFetch as tsUseFetch, useLocalStorage } from 'usehooks-ts';\nimport { getHeaderOptions } from '../services';\nimport { useNavigate } from 'react-router-dom';\nexport const useFetch = _ref => {\n  _s();\n  let {\n    method = 'GET',\n    url,\n    body,\n    options\n  } = _ref;\n  const [loading, setLoading] = useState(false);\n  const [, setIsLogged] = useLocalStorage(process.env.REACT_APP_LOGGED_KEY, false);\n  const navigate = useNavigate();\n  const [fetchURL, setFetchURL] = useState(url);\n  const postBody = useRef(body);\n\n  // 游댳 Configura칞칚o base\n  const fetchOptions = {\n    method,\n    ...(postBody.current && ['POST', 'PUT'].includes(method) ? {\n      body: JSON.stringify(postBody.current)\n    } : {}),\n    ...getHeaderOptions(),\n    ...options\n  };\n\n  // 游댳 Hook do usehooks-ts\n  const {\n    data,\n    error,\n    isLoading,\n    abort\n  } = tsUseFetch(fetchURL !== null && fetchURL !== void 0 ? fetchURL : null, fetchOptions);\n\n  // 游댳 Normaliza resposta para j치 entregar s칩 \"data\"\n  const normalizedData = data && data.data ? data.data : data;\n\n  // 游댳 Controle manual de fetch\n  const doFetch = _ref2 => {\n    let {\n      url,\n      body\n    } = _ref2;\n    if (body) {\n      postBody.current = body;\n    }\n    setFetchURL(url);\n  };\n\n  // 游댳 Controle de erros centralizado\n  useEffect(() => {\n    setLoading(isLoading);\n    if (error) {\n      if (error.message === 'Unauthorized') {\n        setIsLogged(false);\n      }\n      if (error.message === 'Forbidden resource') {\n        navigate('/');\n      }\n      setFetchURL(undefined);\n    }\n  }, [error, isLoading, navigate, setIsLogged]);\n\n  // 游댳 Retorna API simplificada\n  return {\n    data: normalizedData,\n    error,\n    loading,\n    doFetch,\n    abort // caso queira cancelar requests\n  };\n};\n_s(useFetch, \"Ug4VH8MDUKraPnQZmjJN33FkGnE=\", false, function () {\n  return [useLocalStorage, useNavigate];\n});\nexport default useFetch;","map":{"version":3,"names":["useEffect","useRef","useState","useFetch","tsUseFetch","useLocalStorage","getHeaderOptions","useNavigate","_ref","_s","method","url","body","options","loading","setLoading","setIsLogged","process","env","REACT_APP_LOGGED_KEY","navigate","fetchURL","setFetchURL","postBody","fetchOptions","current","includes","JSON","stringify","data","error","isLoading","abort","normalizedData","doFetch","_ref2","message","undefined"],"sources":["/home/fernando/Documents/develop/www/cpvl/v4_cpvl_2025/cpvl-spa/src/hooks/useFetch.ts"],"sourcesContent":["// import { useEffect, useRef, useState } from 'react';\n// import { useFetch as tsUseFetch, useLocalStorage } from 'usehooks-ts';\n// import { getHeaderOptions } from '../services';\n// import { useNavigate } from 'react-router-dom';\n\n// interface IProps {\n//   method?: 'POST' | 'GET' | 'PUT' | 'DELETE';\n//   url?: string;\n//   body?: any;\n//   options?: RequestInit;\n// }\n\n// const useFetch = <T>({ method = 'GET', url, body, options }: IProps) => {\n//   const [loading, setLoading] = useState(false);\n//   const [, setIsLogged] = useLocalStorage(\n//     process.env.REACT_APP_LOGGED_KEY,\n//     false\n//   );\n//   const navigate = useNavigate();\n//   const [fetchURL, setFetchURL] = useState<string | undefined>(url);\n//   const postBody = useRef(body);\n//   const { data, error } = tsUseFetch<T>(fetchURL ? fetchURL : undefined, {\n//     method,\n//     ...(postBody.current && { body: JSON.stringify(postBody.current) }),\n//     ...getHeaderOptions(),\n//     ...options\n//   });\n\n//   const doFetch = ({ url, body }: { url: string; body: any }) => {\n//     if (body) {\n//       postBody.current = body;\n//     }\n//     setFetchURL(url);\n//   };\n\n//   useEffect(() => {\n//     if (error) {\n//       if (error.message === 'Unauthorized') {\n//         setIsLogged(false);\n//       }\n//       if (error.message === 'Forbidden resource') {\n//         navigate('/');\n//       }\n//       setFetchURL(undefined);\n//     }\n//   }, [error, navigate, setIsLogged]);\n\n//   return { doFetch, data, error, loading };\n// };\n\n// export default useFetch;\nimport { useEffect, useRef, useState } from 'react';\nimport { useFetch as tsUseFetch, useLocalStorage } from 'usehooks-ts';\nimport { getHeaderOptions } from '../services';\nimport { useNavigate } from 'react-router-dom';\n\ninterface IProps {\n  method?: 'POST' | 'GET' | 'PUT' | 'DELETE';\n  url?: string;\n  body?: any;\n  options?: RequestInit;\n}\n\nexport const useFetch = <T>({\n  method = 'GET',\n  url,\n  body,\n  options,\n}: IProps) => {\n  const [loading, setLoading] = useState(false);\n  const [, setIsLogged] = useLocalStorage(\n    process.env.REACT_APP_LOGGED_KEY,\n    false\n  );\n  const navigate = useNavigate();\n  const [fetchURL, setFetchURL] = useState<string | undefined>(url);\n  const postBody = useRef(body);\n\n  // 游댳 Configura칞칚o base\n  const fetchOptions: RequestInit = {\n    method,\n    ...(postBody.current && ['POST', 'PUT'].includes(method)\n      ? { body: JSON.stringify(postBody.current) }\n      : {}),\n    ...getHeaderOptions(),\n    ...options,\n  };\n\n  // 游댳 Hook do usehooks-ts\n  const { data, error, isLoading, abort } = tsUseFetch<T>(\n    fetchURL ?? null,\n    fetchOptions\n  );\n\n  // 游댳 Normaliza resposta para j치 entregar s칩 \"data\"\n  const normalizedData = data && (data as any).data ? (data as any).data : data;\n\n  // 游댳 Controle manual de fetch\n  const doFetch = ({ url, body }: { url: string; body?: any }) => {\n    if (body) {\n      postBody.current = body;\n    }\n    setFetchURL(url);\n  };\n\n  // 游댳 Controle de erros centralizado\n  useEffect(() => {\n    setLoading(isLoading);\n\n    if (error) {\n      if (error.message === 'Unauthorized') {\n        setIsLogged(false);\n      }\n      if (error.message === 'Forbidden resource') {\n        navigate('/');\n      }\n      setFetchURL(undefined);\n    }\n  }, [error, isLoading, navigate, setIsLogged]);\n\n  // 游댳 Retorna API simplificada\n  return {\n    data: normalizedData as T,\n    error,\n    loading,\n    doFetch,\n    abort, // caso queira cancelar requests\n  };\n};\n\nexport default useFetch;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}