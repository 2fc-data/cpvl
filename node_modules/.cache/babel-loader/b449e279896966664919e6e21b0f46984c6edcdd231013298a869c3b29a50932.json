{"ast":null,"code":"import { useEffect, useRef, useState } from 'react';\nimport { useFetch as tsUseFetch, useLocalStorage } from 'usehooks-ts';\nimport { getHeaderOptions } from '../services';\nimport { useNavigate } from 'react-router-dom';\nconst useFetch = _ref => {\n  var _s = $RefreshSig$();\n  let {\n    method,\n    url\n  } = _ref;\n  return _s(_ref2 => {\n    _s();\n    let {\n      method,\n      url,\n      body,\n      options\n    } = _ref2;\n    const [loading, setLoading] = useState(false);\n    const [, setIsLogged] = useLocalStorage(process.env.REACT_APP_LOGGED_KEY, false);\n    const navigate = useNavigate();\n    const [fetchURL, setFetchURL] = useState(url);\n    const postBody = useRef(body);\n    const {\n      data,\n      error\n    } = tsUseFetch(fetchURL, {\n      method,\n      ...(postBody.current && {\n        body: JSON.stringify(postBody.current)\n      }),\n      ...getHeaderOptions(),\n      ...options\n    });\n    const doFetch = _ref3 => {\n      let {\n        url,\n        body\n      } = _ref3;\n      if (body) {\n        postBody.current = body;\n      }\n      setFetchURL(url);\n    };\n    useEffect(() => {\n      if (error) {\n        if (error.message === 'Unauthorized') {\n          setIsLogged(false);\n        }\n        if (error.message === 'Forbidden resource') {\n          navigate('/');\n        }\n        setFetchURL(undefined);\n      }\n    }, [error, navigate, setIsLogged]);\n    return {\n      doFetch,\n      data,\n      error,\n      loading\n    };\n  }, \"Ug4VH8MDUKraPnQZmjJN33FkGnE=\", false, function () {\n    return [useLocalStorage, useNavigate];\n  });\n};\nexport default useFetch;","map":{"version":3,"names":["useEffect","useRef","useState","useFetch","tsUseFetch","useLocalStorage","getHeaderOptions","useNavigate","_ref","_s","$RefreshSig$","method","url","_ref2","body","options","loading","setLoading","setIsLogged","process","env","REACT_APP_LOGGED_KEY","navigate","fetchURL","setFetchURL","postBody","data","error","current","JSON","stringify","doFetch","_ref3","message","undefined"],"sources":["/home/fernando/Documents/develop/www/cpvl/v4_cpvl_2025/cpvl-spa/src/hooks/useFetch.ts"],"sourcesContent":["import { useEffect, useRef, useState } from 'react';\nimport { useFetch as tsUseFetch, useLocalStorage } from 'usehooks-ts';\nimport { getHeaderOptions } from '../services';\nimport { useNavigate } from 'react-router-dom';\n\ninterface IProps {\n  method?: 'POST' | 'GET' | 'PUT' | 'DELETE';\n  url?: string;\n  body?: any;\n  options?: RequestInit;\n}\n\ninterface FetchOptions {\n  method: string;\n  url: string;\n}\n\nconst useFetch = <T>({ method, url} : FetchOptions) => ({ method, url, body, options }: IProps) => {\n  const [loading, setLoading] = useState(false);\n  const [, setIsLogged] = useLocalStorage(\n    process.env.REACT_APP_LOGGED_KEY,\n    false\n  );\n  const navigate = useNavigate();\n  const [fetchURL, setFetchURL] = useState<string | undefined>(url);\n  const postBody = useRef(body);\n  const { data, error } = tsUseFetch<T>(fetchURL, {\n    method,\n    ...(postBody.current && { body: JSON.stringify(postBody.current) }),\n    ...getHeaderOptions(),\n    ...options\n  });\n\n  const doFetch = ({ url, body }: { url: string; body: any }) => {\n    if (body) {\n      postBody.current = body;\n    }\n    setFetchURL(url);\n  };\n\n  useEffect(() => {\n    if (error) {\n      if (error.message === 'Unauthorized') {\n        setIsLogged(false);\n      }\n      if (error.message === 'Forbidden resource') {\n        navigate('/');\n      }\n      setFetchURL(undefined);\n    }\n  }, [error, navigate, setIsLogged]);\n\n  return { doFetch, data, error, loading };\n};\n\nexport default useFetch;\n"],"mappings":"AAAA,SAASA,SAAS,EAAEC,MAAM,EAAEC,QAAQ,QAAQ,OAAO;AACnD,SAASC,QAAQ,IAAIC,UAAU,EAAEC,eAAe,QAAQ,aAAa;AACrE,SAASC,gBAAgB,QAAQ,aAAa;AAC9C,SAASC,WAAW,QAAQ,kBAAkB;AAc9C,MAAMJ,QAAQ,GAAGK,IAAA;EAAA,IAAAC,EAAA,GAAAC,YAAA;EAAA,IAAI;IAAEC,MAAM;IAAEC;EAAkB,CAAC,GAAAJ,IAAA;EAAA,OAAAC,EAAA,CAAKI,KAAA,IAA4C;IAAAJ,EAAA;IAAA,IAA3C;MAAEE,MAAM;MAAEC,GAAG;MAAEE,IAAI;MAAEC;IAAgB,CAAC,GAAAF,KAAA;IAC5F,MAAM,CAACG,OAAO,EAAEC,UAAU,CAAC,GAAGf,QAAQ,CAAC,KAAK,CAAC;IAC7C,MAAM,GAAGgB,WAAW,CAAC,GAAGb,eAAe,CACrCc,OAAO,CAACC,GAAG,CAACC,oBAAoB,EAChC,KACF,CAAC;IACD,MAAMC,QAAQ,GAAGf,WAAW,CAAC,CAAC;IAC9B,MAAM,CAACgB,QAAQ,EAAEC,WAAW,CAAC,GAAGtB,QAAQ,CAAqBU,GAAG,CAAC;IACjE,MAAMa,QAAQ,GAAGxB,MAAM,CAACa,IAAI,CAAC;IAC7B,MAAM;MAAEY,IAAI;MAAEC;IAAM,CAAC,GAAGvB,UAAU,CAAImB,QAAQ,EAAE;MAC9CZ,MAAM;MACN,IAAIc,QAAQ,CAACG,OAAO,IAAI;QAAEd,IAAI,EAAEe,IAAI,CAACC,SAAS,CAACL,QAAQ,CAACG,OAAO;MAAE,CAAC,CAAC;MACnE,GAAGtB,gBAAgB,CAAC,CAAC;MACrB,GAAGS;IACL,CAAC,CAAC;IAEF,MAAMgB,OAAO,GAAGC,KAAA,IAA+C;MAAA,IAA9C;QAAEpB,GAAG;QAAEE;MAAiC,CAAC,GAAAkB,KAAA;MACxD,IAAIlB,IAAI,EAAE;QACRW,QAAQ,CAACG,OAAO,GAAGd,IAAI;MACzB;MACAU,WAAW,CAACZ,GAAG,CAAC;IAClB,CAAC;IAEDZ,SAAS,CAAC,MAAM;MACd,IAAI2B,KAAK,EAAE;QACT,IAAIA,KAAK,CAACM,OAAO,KAAK,cAAc,EAAE;UACpCf,WAAW,CAAC,KAAK,CAAC;QACpB;QACA,IAAIS,KAAK,CAACM,OAAO,KAAK,oBAAoB,EAAE;UAC1CX,QAAQ,CAAC,GAAG,CAAC;QACf;QACAE,WAAW,CAACU,SAAS,CAAC;MACxB;IACF,CAAC,EAAE,CAACP,KAAK,EAAEL,QAAQ,EAAEJ,WAAW,CAAC,CAAC;IAElC,OAAO;MAAEa,OAAO;MAAEL,IAAI;MAAEC,KAAK;MAAEX;IAAQ,CAAC;EAC1C,CAAC;IAAA,QAlCyBX,eAAe,EAItBE,WAAW;EAAA;AAAA,CA8B7B;AAED,eAAeJ,QAAQ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}