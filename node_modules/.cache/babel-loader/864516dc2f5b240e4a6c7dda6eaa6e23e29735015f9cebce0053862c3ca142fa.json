{"ast":null,"code":"var _jsxFileName = \"/home/fernando/Documents/develop/www/cpvl/v4_cpvl_2025/cpvl-spa/src/components/PaymentChechbox/PaymentCheckbox.component.tsx\",\n  _s = $RefreshSig$();\nimport { useState } from 'react';\nimport { useFetch } from '../../hooks/';\nimport { useParams } from 'react-router-dom';\nimport { API, getURI } from '../../services';\nimport { Button, Box } from '@mui/material';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const PaymentCheckbox = () => {\n  _s();\n  const {\n    userId\n  } = useParams();\n  const {\n    doFetch,\n    loading\n  } = useFetch({\n    method: 'POST'\n  });\n  const [selectedMonths, setSelectedMonths] = useState([]);\n  const handleCheckboxChange = month => {\n    setSelectedMonths(prev => prev.includes(month) ? prev.filter(m => m !== month) : [...prev, month]);\n  };\n\n  // quando marcar o checkbox → insere na tabela\n  const handleSubmit = async () => {\n    if (!userId) return;\n    const qtd = selectedMonths.length;\n    let type = 'mensal';\n    if (qtd === 3) type = 'trimestral';\n    if (qtd === 6) type = 'semestral';\n    if (qtd === 12) type = 'anual';\n    try {\n      await doFetch({\n        url: getURI(API.paymentMonthly),\n        body: {\n          userId: parseInt(userId),\n          amount: 50 * qtd,\n          // exemplo: 50 por mês\n          ref_year: new Date().getFullYear(),\n          ref_month: qtd,\n          // salva a quantidade de meses\n          type,\n          description: `Pagamento ${type} via checkbox`,\n          date: new Date()\n        },\n        method: 'POST'\n      });\n      alert(`Pagamento ${type} registrado com sucesso!`);\n    } catch (error) {\n      console.error('Erro ao salvar pagamento', error);\n      alert('Erro ao salvar pagamento');\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(Box, {\n    children: [/*#__PURE__*/_jsxDEV(Box, {\n      display: \"flex\",\n      gap: 1,\n      flexWrap: \"wrap\",\n      children: Array.from({\n        length: 12\n      }, (_, i) => i + 1).map(month => /*#__PURE__*/_jsxDEV(\"label\", {\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"checkbox\",\n          checked: selectedMonths.includes(month),\n          onChange: () => handleCheckboxChange(month),\n          disabled: loading\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 13\n        }, this), month]\n      }, month, true, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      variant: \"contained\",\n      color: \"primary\",\n      onClick: handleSubmit,\n      disabled: loading || selectedMonths.length === 0,\n      sx: {\n        mt: 2\n      },\n      children: \"Salvar Pagamento\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 68,\n    columnNumber: 5\n  }, this);\n};\n_s(PaymentCheckbox, \"8febjPiYnB/CY8C9D2Q8oSLhgJE=\", false, function () {\n  return [useParams, useFetch];\n});\n_c = PaymentCheckbox;\nvar _c;\n$RefreshReg$(_c, \"PaymentCheckbox\");","map":{"version":3,"names":["useState","useFetch","useParams","API","getURI","Button","Box","jsxDEV","_jsxDEV","PaymentCheckbox","_s","userId","doFetch","loading","method","selectedMonths","setSelectedMonths","handleCheckboxChange","month","prev","includes","filter","m","handleSubmit","qtd","length","type","url","paymentMonthly","body","parseInt","amount","ref_year","Date","getFullYear","ref_month","description","date","alert","error","console","children","display","gap","flexWrap","Array","from","_","i","map","checked","onChange","disabled","fileName","_jsxFileName","lineNumber","columnNumber","variant","color","onClick","sx","mt","_c","$RefreshReg$"],"sources":["/home/fernando/Documents/develop/www/cpvl/v4_cpvl_2025/cpvl-spa/src/components/PaymentChechbox/PaymentCheckbox.component.tsx"],"sourcesContent":["import { useState } from 'react';\nimport { useFetch } from '../../hooks/';\nimport { useParams } from 'react-router-dom';\nimport { API, getURI } from '../../services';\nimport { Button, Box } from '@mui/material';\n\ninterface PaymentMonthly {\n  id: number;\n  userId: number;\n  amount: number;\n  ref_year: number;\n  ref_month: number;\n  type?: string;\n  description?: string;\n  date?: string;\n}\n\nexport const PaymentCheckbox: React.FC = () => {\n  const { userId } = useParams<{ userId: string }>();\n  const { doFetch, loading } = useFetch<PaymentMonthly>({\n    method: 'POST'\n  });\n  const [selectedMonths, setSelectedMonths] = useState<number[]>([]);\n\n  const handleCheckboxChange = (month: number) => {\n    setSelectedMonths((prev) =>\n      prev.includes(month)\n        ? prev.filter((m) => m !== month)\n        : [...prev, month]\n    );\n  };\n\n  // quando marcar o checkbox → insere na tabela\n  const handleSubmit = async () => {\n    if (!userId) return;\n\n    const qtd = selectedMonths.length;\n    let type = 'mensal';\n\n    if (qtd === 3) type = 'trimestral';\n    if (qtd === 6) type = 'semestral';\n    if (qtd === 12) type = 'anual';\n\n    try {\n      await doFetch({\n        url: getURI(API.paymentMonthly),\n        body: {\n          userId: parseInt(userId),\n          amount: 50 * qtd, // exemplo: 50 por mês\n          ref_year: new Date().getFullYear(),\n          ref_month: qtd, // salva a quantidade de meses\n          type,\n          description: `Pagamento ${type} via checkbox`,\n          date: new Date(),\n        },\n        method: 'POST',\n      });\n\n      alert(`Pagamento ${type} registrado com sucesso!`);\n    } catch (error) {\n      console.error('Erro ao salvar pagamento', error);\n      alert('Erro ao salvar pagamento');\n    }\n  };\n\n\n  return (\n    <Box>\n      <Box display=\"flex\" gap={1} flexWrap=\"wrap\">\n        {Array.from({ length: 12 }, (_, i) => i + 1).map((month) => (\n          <label key={month}>\n            <input\n              type=\"checkbox\"\n              checked={selectedMonths.includes(month)}\n              onChange={() => handleCheckboxChange(month)}\n              disabled={loading}\n            />\n            {month}\n          </label>\n        ))}\n      </Box>\n\n      <Button\n        variant=\"contained\"\n        color=\"primary\"\n        onClick={handleSubmit}\n        disabled={loading || selectedMonths.length === 0}\n        sx={{ mt: 2 }}\n      >\n        Salvar Pagamento\n      </Button>\n    </Box>\n  );\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}