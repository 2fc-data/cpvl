{"ast":null,"code":"var _s = $RefreshSig$();\n// import { useEffect, useRef, useState } from 'react';\n// import { useFetch as tsUseFetch, useLocalStorage } from 'usehooks-ts';\n// import { getHeaderOptions } from '../services';\n// import { useNavigate } from 'react-router-dom';\n\n// interface IProps {\n//   method?: 'POST' | 'GET' | 'PUT' | 'DELETE';\n//   url?: string;\n//   body?: any;\n//   options?: RequestInit;\n// }\n\n// const useFetch = <T>({ method = 'GET', url, body, options }: IProps) => {\n//   const [loading, setLoading] = useState(false);\n//   const [, setIsLogged] = useLocalStorage(\n//     process.env.REACT_APP_LOGGED_KEY,\n//     false\n//   );\n//   const navigate = useNavigate();\n//   const [fetchURL, setFetchURL] = useState<string | undefined>(url);\n//   const postBody = useRef(body);\n//   const { data, error } = tsUseFetch<T>(fetchURL, {\n//     method,\n//     ...(postBody.current && { body: JSON.stringify(postBody.current) }),\n//     ...getHeaderOptions(),\n//     ...options\n//   });\n\n//   const doFetch = ({ url, body }: { url: string; body: any }) => {\n//     if (body) {\n//       postBody.current = body;\n//     }\n//     setFetchURL(url);\n//   };\n\n//   useEffect(() => {\n//     if (error) {\n//       if (error.message === 'Unauthorized') {\n//         setIsLogged(false);\n//       }\n//       if (error.message === 'Forbidden resource') {\n//         navigate('/');\n//       }\n//       setFetchURL(undefined);\n//     }\n//   }, [error, navigate, setIsLogged]);\n\n//   return { doFetch, data, error, loading };\n// };\n\n// export default useFetch;\n\nimport { useState, useEffect } from 'react';\nexport const useFetch = _ref => {\n  _s();\n  let {\n    url\n  } = _ref;\n  const [data, setData] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        setLoading(true);\n        setError(null);\n        const response = await fetch(url, {\n          method: 'GET',\n          headers: {\n            'Content-Type': 'application/json',\n            'Authorization': `Bearer ${localStorage.getItem('token') || ''}` // Adjust based on your auth setup\n          }\n        });\n        if (!response.ok) {\n          throw new Error(`Erro HTTP! Status: ${response.status}`);\n        }\n        const result = await response.json();\n        setData(result);\n      } catch (err) {\n        setError(err instanceof Error ? err.message : 'Erro desconhecido ao buscar pilotos');\n      } finally {\n        setLoading(false);\n      }\n    };\n    fetchData();\n  }, [url]);\n  return {\n    data,\n    loading,\n    error\n  };\n};\n_s(useFetch, \"RiL7vLwmC7ZWXKL/bXt2EIBjBYk=\");","map":{"version":3,"names":["useState","useEffect","useFetch","_ref","_s","url","data","setData","loading","setLoading","error","setError","fetchData","response","fetch","method","headers","localStorage","getItem","ok","Error","status","result","json","err","message"],"sources":["/home/fernando/Documents/develop/www/cpvl/v4_cpvl_2025/cpvl-spa/src/hooks/useFetch.ts"],"sourcesContent":["// import { useEffect, useRef, useState } from 'react';\n// import { useFetch as tsUseFetch, useLocalStorage } from 'usehooks-ts';\n// import { getHeaderOptions } from '../services';\n// import { useNavigate } from 'react-router-dom';\n\n// interface IProps {\n//   method?: 'POST' | 'GET' | 'PUT' | 'DELETE';\n//   url?: string;\n//   body?: any;\n//   options?: RequestInit;\n// }\n\n// const useFetch = <T>({ method = 'GET', url, body, options }: IProps) => {\n//   const [loading, setLoading] = useState(false);\n//   const [, setIsLogged] = useLocalStorage(\n//     process.env.REACT_APP_LOGGED_KEY,\n//     false\n//   );\n//   const navigate = useNavigate();\n//   const [fetchURL, setFetchURL] = useState<string | undefined>(url);\n//   const postBody = useRef(body);\n//   const { data, error } = tsUseFetch<T>(fetchURL, {\n//     method,\n//     ...(postBody.current && { body: JSON.stringify(postBody.current) }),\n//     ...getHeaderOptions(),\n//     ...options\n//   });\n\n//   const doFetch = ({ url, body }: { url: string; body: any }) => {\n//     if (body) {\n//       postBody.current = body;\n//     }\n//     setFetchURL(url);\n//   };\n\n//   useEffect(() => {\n//     if (error) {\n//       if (error.message === 'Unauthorized') {\n//         setIsLogged(false);\n//       }\n//       if (error.message === 'Forbidden resource') {\n//         navigate('/');\n//       }\n//       setFetchURL(undefined);\n//     }\n//   }, [error, navigate, setIsLogged]);\n\n//   return { doFetch, data, error, loading };\n// };\n\n// export default useFetch;\n\n\nimport { useState, useEffect } from 'react';\n\ninterface FetchState<T> {\n  data: T | null;\n  loading: boolean;\n  error: string | null;\n}\n\nexport const useFetch = <T>({ url }: { url: string }): FetchState<T> => {\n  const [data, setData] = useState<T | null>(null);\n  const [loading, setLoading] = useState<boolean>(true);\n  const [error, setError] = useState<string | null>(null);\n\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        setLoading(true);\n        setError(null);\n\n        const response = await fetch(url, {\n          method: 'GET',\n          headers: {\n            'Content-Type': 'application/json',\n            'Authorization': `Bearer ${localStorage.getItem('token') || ''}`, // Adjust based on your auth setup\n          },\n        });\n\n        if (!response.ok) {\n          throw new Error(`Erro HTTP! Status: ${response.status}`);\n        }\n\n        const result: T = await response.json();\n        setData(result);\n      } catch (err) {\n        setError(err instanceof Error ? err.message : 'Erro desconhecido ao buscar pilotos');\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    fetchData();\n  }, [url]);\n\n  return { data, loading, error };\n};"],"mappings":";AAAA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAGA,SAASA,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAQ3C,OAAO,MAAMC,QAAQ,GAAGC,IAAA,IAAgD;EAAAC,EAAA;EAAA,IAA5C;IAAEC;EAAqB,CAAC,GAAAF,IAAA;EAClD,MAAM,CAACG,IAAI,EAAEC,OAAO,CAAC,GAAGP,QAAQ,CAAW,IAAI,CAAC;EAChD,MAAM,CAACQ,OAAO,EAAEC,UAAU,CAAC,GAAGT,QAAQ,CAAU,IAAI,CAAC;EACrD,MAAM,CAACU,KAAK,EAAEC,QAAQ,CAAC,GAAGX,QAAQ,CAAgB,IAAI,CAAC;EAEvDC,SAAS,CAAC,MAAM;IACd,MAAMW,SAAS,GAAG,MAAAA,CAAA,KAAY;MAC5B,IAAI;QACFH,UAAU,CAAC,IAAI,CAAC;QAChBE,QAAQ,CAAC,IAAI,CAAC;QAEd,MAAME,QAAQ,GAAG,MAAMC,KAAK,CAACT,GAAG,EAAE;UAChCU,MAAM,EAAE,KAAK;UACbC,OAAO,EAAE;YACP,cAAc,EAAE,kBAAkB;YAClC,eAAe,EAAE,UAAUC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC,IAAI,EAAE,EAAE,CAAE;UACpE;QACF,CAAC,CAAC;QAEF,IAAI,CAACL,QAAQ,CAACM,EAAE,EAAE;UAChB,MAAM,IAAIC,KAAK,CAAC,sBAAsBP,QAAQ,CAACQ,MAAM,EAAE,CAAC;QAC1D;QAEA,MAAMC,MAAS,GAAG,MAAMT,QAAQ,CAACU,IAAI,CAAC,CAAC;QACvChB,OAAO,CAACe,MAAM,CAAC;MACjB,CAAC,CAAC,OAAOE,GAAG,EAAE;QACZb,QAAQ,CAACa,GAAG,YAAYJ,KAAK,GAAGI,GAAG,CAACC,OAAO,GAAG,qCAAqC,CAAC;MACtF,CAAC,SAAS;QACRhB,UAAU,CAAC,KAAK,CAAC;MACnB;IACF,CAAC;IAEDG,SAAS,CAAC,CAAC;EACb,CAAC,EAAE,CAACP,GAAG,CAAC,CAAC;EAET,OAAO;IAAEC,IAAI;IAAEE,OAAO;IAAEE;EAAM,CAAC;AACjC,CAAC;AAACN,EAAA,CApCWF,QAAQ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}