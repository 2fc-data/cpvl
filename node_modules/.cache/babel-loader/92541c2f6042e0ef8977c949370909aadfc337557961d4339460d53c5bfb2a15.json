{"ast":null,"code":"var _jsxFileName = \"/home/fernando/Documents/develop/www/cpvl/v4_cpvl_2025/cpvl-spa/src/components/PaymentMonthly/PaymentMonthly.component.tsx\",\n  _s = $RefreshSig$();\nimport { Payment as PaymentIcon } from '@mui/icons-material';\nimport { Box, Typography, Card, CardContent, Chip, Alert, Table, TableBody, TableCell, TableContainer, TableHead, TableRow, Paper, CircularProgress, Accordion, AccordionSummary, AccordionDetails, FormControl, InputLabel, Select, MenuItem } from '@mui/material';\nimport ExpandMoreIcon from '@mui/icons-material/ExpandMore';\nimport { blue, blueGrey, green, lime } from '@mui/material/colors';\nimport { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { useFetch } from '../../hooks';\nimport { API, getURI } from '../../services';\nimport { PaymentQRCode } from '../PaymentQRCode';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport const PaymentMonthly = () => {\n  _s();\n  const {\n    userId\n  } = useParams();\n  const [payments, setPayments] = useState([]);\n  const [selectedYear, setSelectedYear] = useState(new Date().getFullYear());\n  const isUserIdValid = userId && !isNaN(parseInt(userId));\n  const apiUrl = isUserIdValid ? getURI(`${API.paymentMonthly}/${userId}`) : undefined;\n  const {\n    data: paymentsData,\n    error: paymentsError,\n    loading: paymentsLoading\n  } = useFetch({\n    method: 'GET',\n    url: apiUrl\n  });\n  useEffect(() => {\n    if (paymentsData) {\n      setPayments(Array.isArray(paymentsData) ? paymentsData : []);\n    } else if (paymentsError) {\n      setPayments([]); // Clear payments on error\n    }\n  }, [paymentsData, paymentsError]);\n  if (paymentsLoading) {\n    return /*#__PURE__*/_jsxDEV(Box, {\n      display: \"flex\",\n      justifyContent: \"center\",\n      alignItems: \"center\",\n      minHeight: \"400px\",\n      children: /*#__PURE__*/_jsxDEV(CircularProgress, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 7\n    }, this);\n  }\n\n  // Format month\n  const formatMonth = month => {\n    const months = ['Janeiro', 'Fevereiro', 'Março', 'Abril', 'Maio', 'Junho', 'Julho', 'Agosto', 'Setembro', 'Outubro', 'Novembro', 'Dezembro'];\n    return months[month - 1] || `Mês ${month}`;\n  };\n\n  // Parse amount\n  const parseAmount = amount => {\n    if (!amount || amount === '') return 0;\n    if (typeof amount === 'number') return amount;\n    try {\n      return parseFloat(amount.toString().replace(',', '.'));\n    } catch (error) {\n      console.error('Error parsing amount:', amount, error);\n      return 0;\n    }\n  };\n\n  // Get available years from payments\n  // const getAvailableYears = (): number[] => {\n  //   const years = [...new Set(payments.map(p => p.ref_year))];\n  //   return years.sort((a, b) => b - a); // Sort descending (newest first)\n  // };\n\n  const getAvailableYears = () => {\n    const yearsSet = new Set(payments.map(p => p.ref_year));\n    const yearsArray = Array.from(yearsSet);\n    return yearsArray.sort((a, b) => b - a); // Sort descending (newest first)\n  };\n\n  // Filter payments by selected year\n  const getFilteredPayments = () => {\n    if (selectedYear === 'all') {\n      return payments;\n    }\n    return payments.filter(payment => payment.ref_year === selectedYear);\n  };\n\n  // Calculate financial summary based on filtered payments\n  const getFinancialSummary = () => {\n    const filteredPayments = getFilteredPayments();\n    const totalAmount = filteredPayments.reduce((sum, p) => sum + parseAmount(p.amount), 0);\n    const monthlyStatus = filteredPayments.sort((a, b) => a.ref_year - b.ref_year || a.ref_month - b.ref_month).map(payment => ({\n      year: payment.ref_year,\n      month: payment.ref_month,\n      monthName: formatMonth(payment.ref_month),\n      amount: parseAmount(payment.amount),\n      type: payment.type || 'N/A',\n      description: payment.Description || 'N/A',\n      date: payment.date\n    }));\n    return {\n      total: filteredPayments.length,\n      totalAmount,\n      monthlyStatus\n    };\n  };\n  const financialSummary = getFinancialSummary();\n  const availableYears = getAvailableYears();\n  const filteredPayments = getFilteredPayments();\n\n  // Render invalid userId error\n  if (!isUserIdValid) {\n    console.error('Invalid userId:', userId);\n    return /*#__PURE__*/_jsxDEV(Alert, {\n      severity: \"error\",\n      children: \"ID de usu\\xE1rio inv\\xE1lido. Por favor, forne\\xE7a um ID v\\xE1lido.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 170,\n      columnNumber: 7\n    }, this);\n  }\n\n  // Render loading state\n  if (paymentsLoading) {\n    return /*#__PURE__*/_jsxDEV(Box, {\n      display: \"flex\",\n      justifyContent: \"center\",\n      p: 3,\n      children: /*#__PURE__*/_jsxDEV(CircularProgress, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 180,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 179,\n      columnNumber: 7\n    }, this);\n  }\n\n  // Render error state\n  if (paymentsError) {\n    let errorMessage = 'Erro ao carregar histórico de pagamentos.';\n    if (paymentsError.message.includes('not valid JSON')) {\n      errorMessage = 'Erro: A resposta do servidor não é um JSON válido. Verifique a configuração da API.';\n    } else if (paymentsError.message === 'Unauthorized') {\n      errorMessage = 'Acesso não autorizado. Por favor, faça login novamente.';\n    } else if (paymentsError.message === 'Forbidden resource') {\n      errorMessage = 'Acesso proibido. Você não tem permissão para visualizar esses dados.';\n    } else if (paymentsError.message) {\n      errorMessage += ` Detalhes: ${paymentsError.message}`;\n    }\n    return /*#__PURE__*/_jsxDEV(Alert, {\n      severity: \"error\",\n      children: [errorMessage, \" Tente novamente mais tarde ou contate o suporte.\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 200,\n      columnNumber: 7\n    }, this);\n  }\n  const yearCurrent = new Date().getFullYear();\n  const monthCurrent = new Date().getMonth() + 1;\n\n  // Render empty state\n  if (payments.length === 0) {\n    return /*#__PURE__*/_jsxDEV(Alert, {\n      severity: \"info\",\n      children: \"Nenhum registro de pagamento encontrado para este piloto.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 212,\n      columnNumber: 7\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Card, {\n      elevation: 2,\n      sx: {\n        mb: 2\n      },\n      children: /*#__PURE__*/_jsxDEV(CardContent, {\n        children: /*#__PURE__*/_jsxDEV(Box, {\n          display: \"flex\",\n          alignItems: \"center\",\n          gap: 2,\n          children: [/*#__PURE__*/_jsxDEV(Typography, {\n            variant: \"h6\",\n            color: \"primary\",\n            children: \"Filtrar por Ano:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 224,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(FormControl, {\n            size: \"small\",\n            sx: {\n              minWidth: 150\n            },\n            children: [/*#__PURE__*/_jsxDEV(InputLabel, {\n              id: \"year-select-label\",\n              children: \"Ano\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 228,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Select, {\n              labelId: \"year-select-label\",\n              value: selectedYear,\n              label: \"Ano\",\n              onChange: e => setSelectedYear(e.target.value),\n              children: [/*#__PURE__*/_jsxDEV(MenuItem, {\n                value: \"all\",\n                children: \"Todos os Anos\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 235,\n                columnNumber: 17\n              }, this), availableYears.map(year => /*#__PURE__*/_jsxDEV(MenuItem, {\n                value: year,\n                children: year\n              }, year, false, {\n                fileName: _jsxFileName,\n                lineNumber: 237,\n                columnNumber: 19\n              }, this))]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 229,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 227,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Typography, {\n            variant: \"body2\",\n            color: \"textSecondary\",\n            children: selectedYear === 'all' ? `Mostrando ${payments.length} registros de todos os anos` : `Mostrando ${filteredPayments.length} registros de ${selectedYear}`\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 243,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 223,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 222,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 221,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Card, {\n      elevation: 3,\n      children: /*#__PURE__*/_jsxDEV(Accordion, {\n        children: [/*#__PURE__*/_jsxDEV(AccordionSummary, {\n          expandIcon: /*#__PURE__*/_jsxDEV(ExpandMoreIcon, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 256,\n            columnNumber: 25\n          }, this),\n          \"aria-controls\": \"panel1-content\",\n          id: \"panel1-header\",\n          children: /*#__PURE__*/_jsxDEV(Box, {\n            display: \"flex\",\n            alignItems: \"center\",\n            mb: 3,\n            children: [/*#__PURE__*/_jsxDEV(PaymentIcon, {\n              sx: {\n                fontSize: 32,\n                color: blue[500],\n                mr: 2\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 261,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Typography, {\n              variant: \"h5\",\n              color: \"primary\",\n              children: [\"Resumo Financeiro \", selectedYear !== 'all' && `- ${selectedYear}`]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 262,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 260,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 255,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(AccordionDetails, {\n          children: /*#__PURE__*/_jsxDEV(TableContainer, {\n            component: Paper,\n            elevation: 0,\n            children: /*#__PURE__*/_jsxDEV(Table, {\n              children: [/*#__PURE__*/_jsxDEV(TableHead, {\n                children: /*#__PURE__*/_jsxDEV(TableRow, {\n                  children: [/*#__PURE__*/_jsxDEV(TableCell, {\n                    sx: {\n                      color: blue[600]\n                    },\n                    children: /*#__PURE__*/_jsxDEV(\"strong\", {\n                      children: \"M\\xEAs\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 273,\n                      columnNumber: 23\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 272,\n                    columnNumber: 21\n                  }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n                    sx: {\n                      color: blue[600]\n                    },\n                    children: /*#__PURE__*/_jsxDEV(\"strong\", {\n                      children: \"Tipo\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 276,\n                      columnNumber: 23\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 275,\n                    columnNumber: 21\n                  }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n                    sx: {\n                      color: blue[600]\n                    },\n                    children: /*#__PURE__*/_jsxDEV(\"strong\", {\n                      children: \"Valor\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 279,\n                      columnNumber: 23\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 278,\n                    columnNumber: 21\n                  }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n                    sx: {\n                      color: blue[600]\n                    },\n                    children: /*#__PURE__*/_jsxDEV(\"strong\", {\n                      children: \"Descri\\xE7\\xE3o\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 282,\n                      columnNumber: 23\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 281,\n                    columnNumber: 21\n                  }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n                    sx: {\n                      color: blue[600]\n                    },\n                    children: /*#__PURE__*/_jsxDEV(\"strong\", {\n                      children: \"Data\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 285,\n                      columnNumber: 23\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 284,\n                    columnNumber: 21\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 271,\n                  columnNumber: 19\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 270,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(TableBody, {\n                children: filteredPayments.sort((a, b) => a.ref_year - b.ref_year || a.ref_month - b.ref_month).map((payment, index) => /*#__PURE__*/_jsxDEV(TableRow, {\n                  hover: true,\n                  children: [/*#__PURE__*/_jsxDEV(TableCell, {\n                    children: payment.ref_month === monthCurrent && payment.ref_year === yearCurrent ? /*#__PURE__*/_jsxDEV(Chip, {\n                      label: formatMonth(payment.ref_month),\n                      size: \"small\",\n                      variant: \"outlined\",\n                      sx: {\n                        backgroundColor: blue[100],\n                        color: blue[800],\n                        '&:hover': {\n                          backgroundColor: blue[200]\n                        },\n                        fontWeight: 'bold',\n                        width: 150\n                      },\n                      title: `${payment.ref_year}`\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 300,\n                      columnNumber: 29\n                    }, this) : /*#__PURE__*/_jsxDEV(Chip, {\n                      label: formatMonth(payment.ref_month),\n                      size: \"small\",\n                      variant: \"outlined\",\n                      sx: {\n                        backgroundColor: blue[50],\n                        color: blue[700],\n                        '&:hover': {\n                          backgroundColor: blue[100]\n                        },\n                        width: 150\n                      },\n                      title: `${payment.ref_year}`\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 314,\n                      columnNumber: 29\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 297,\n                    columnNumber: 25\n                  }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n                    children: payment.type ? /*#__PURE__*/_jsxDEV(Chip, {\n                      label: payment.type,\n                      size: \"small\",\n                      variant: \"outlined\",\n                      sx: {\n                        backgroundColor: lime[50],\n                        color: lime[800],\n                        '&:hover': {\n                          backgroundColor: lime[100]\n                        },\n                        fontWeight: 'bold',\n                        width: 150\n                      }\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 330,\n                      columnNumber: 29\n                    }, this) : ''\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 328,\n                    columnNumber: 25\n                  }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n                    children: parseAmount(payment.amount) > 0 ? /*#__PURE__*/_jsxDEV(Chip, {\n                      label: payment.amount,\n                      size: \"small\",\n                      variant: \"outlined\",\n                      sx: {\n                        backgroundColor: green[50],\n                        color: green[800],\n                        '&:hover': {\n                          backgroundColor: green[100]\n                        },\n                        fontWeight: 'bold',\n                        width: 150\n                      }\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 348,\n                      columnNumber: 29\n                    }, this) : /*#__PURE__*/_jsxDEV(Chip, {\n                      label: payment.amount,\n                      size: \"medium\",\n                      variant: \"outlined\",\n                      sx: {\n                        color: blueGrey[300],\n                        width: 150\n                      }\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 361,\n                      columnNumber: 29\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 346,\n                    columnNumber: 25\n                  }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n                    children: /*#__PURE__*/_jsxDEV(Typography, {\n                      variant: \"body2\",\n                      children: payment.Description && payment.Description.trim() !== '' ? payment.Description : ''\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 373,\n                      columnNumber: 27\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 372,\n                    columnNumber: 25\n                  }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n                    children: /*#__PURE__*/_jsxDEV(Typography, {\n                      variant: \"body2\",\n                      children: payment.date ? new Date(payment.date).toLocaleDateString('pt-BR') : ''\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 381,\n                      columnNumber: 27\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 380,\n                    columnNumber: 25\n                  }, this)]\n                }, `${payment.id || index}`, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 296,\n                  columnNumber: 23\n                }, this))\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 289,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(TableBody, {\n                children: /*#__PURE__*/_jsxDEV(TableRow, {\n                  children: /*#__PURE__*/_jsxDEV(TableCell, {\n                    colSpan: 5,\n                    children: /*#__PURE__*/_jsxDEV(Box, {\n                      textAlign: \"center\",\n                      p: 2,\n                      bgcolor: blue[50],\n                      borderRadius: 2,\n                      children: [/*#__PURE__*/_jsxDEV(Typography, {\n                        variant: \"h5\",\n                        color: blue[600],\n                        children: [\"R$ \", financialSummary.totalAmount.toFixed(2)]\n                      }, void 0, true, {\n                        fileName: _jsxFileName,\n                        lineNumber: 402,\n                        columnNumber: 25\n                      }, this), /*#__PURE__*/_jsxDEV(Typography, {\n                        variant: \"body2\",\n                        color: \"textSecondary\",\n                        children: [\"Valor Total Pago \", selectedYear !== 'all' && `em ${selectedYear}`]\n                      }, void 0, true, {\n                        fileName: _jsxFileName,\n                        lineNumber: 405,\n                        columnNumber: 25\n                      }, this)]\n                    }, void 0, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 396,\n                      columnNumber: 23\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 395,\n                    columnNumber: 21\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 394,\n                  columnNumber: 19\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 393,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 269,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 268,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 267,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 254,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 253,\n      columnNumber: 7\n    }, this), filteredPayments.length > 0 && /*#__PURE__*/_jsxDEV(Card, {\n      elevation: 3,\n      sx: {\n        mt: 3\n      },\n      children: /*#__PURE__*/_jsxDEV(CardContent, {\n        children: /*#__PURE__*/_jsxDEV(Box, {\n          display: \"flex\",\n          alignItems: \"center\",\n          justifyContent: \"center\",\n          textAlign: 'center',\n          mb: 3,\n          children: /*#__PURE__*/_jsxDEV(PaymentQRCode, {\n            valor: Number(filteredPayments[0].amount)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 428,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 421,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 420,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 419,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true);\n};\n_s(PaymentMonthly, \"aCFFHeMQ/Q/OT8O+sdr+BCEz37Y=\", false, function () {\n  return [useParams, useFetch];\n});\n_c = PaymentMonthly;\nvar _c;\n$RefreshReg$(_c, \"PaymentMonthly\");","map":{"version":3,"names":["Payment","PaymentIcon","Box","Typography","Card","CardContent","Chip","Alert","Table","TableBody","TableCell","TableContainer","TableHead","TableRow","Paper","CircularProgress","Accordion","AccordionSummary","AccordionDetails","FormControl","InputLabel","Select","MenuItem","ExpandMoreIcon","blue","blueGrey","green","lime","useEffect","useState","useParams","useFetch","API","getURI","PaymentQRCode","jsxDEV","_jsxDEV","Fragment","_Fragment","PaymentMonthly","_s","userId","payments","setPayments","selectedYear","setSelectedYear","Date","getFullYear","isUserIdValid","isNaN","parseInt","apiUrl","paymentMonthly","undefined","data","paymentsData","error","paymentsError","loading","paymentsLoading","method","url","Array","isArray","display","justifyContent","alignItems","minHeight","children","fileName","_jsxFileName","lineNumber","columnNumber","formatMonth","month","months","parseAmount","amount","parseFloat","toString","replace","console","getAvailableYears","yearsSet","Set","map","p","ref_year","yearsArray","from","sort","a","b","getFilteredPayments","filter","payment","getFinancialSummary","filteredPayments","totalAmount","reduce","sum","monthlyStatus","ref_month","year","monthName","type","description","Description","date","total","length","financialSummary","availableYears","severity","errorMessage","message","includes","yearCurrent","monthCurrent","getMonth","elevation","sx","mb","gap","variant","color","size","minWidth","id","labelId","value","label","onChange","e","target","expandIcon","fontSize","mr","component","index","hover","backgroundColor","fontWeight","width","title","trim","toLocaleDateString","colSpan","textAlign","bgcolor","borderRadius","toFixed","mt","valor","Number","_c","$RefreshReg$"],"sources":["/home/fernando/Documents/develop/www/cpvl/v4_cpvl_2025/cpvl-spa/src/components/PaymentMonthly/PaymentMonthly.component.tsx"],"sourcesContent":["import { Payment as PaymentIcon } from '@mui/icons-material';\nimport {\n  Box,\n  Typography,\n  Card,\n  CardContent,\n  Chip,\n  Alert,\n  Table,\n  TableBody,\n  TableCell,\n  TableContainer,\n  TableHead,\n  TableRow,\n  Paper,\n  CircularProgress,\n  Accordion,\n  AccordionSummary,\n  AccordionDetails,\n  FormControl,\n  InputLabel,\n  Select,\n  MenuItem\n} from '@mui/material';\nimport ExpandMoreIcon from '@mui/icons-material/ExpandMore';\nimport { blue, blueGrey, green, lime } from '@mui/material/colors';\nimport { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { useFetch } from '../../hooks';\nimport { API, getURI } from '../../services';\nimport { PaymentQRCode } from '../PaymentQRCode';\n\ninterface IPaymentMonthly {\n  id?: number;\n  userId: number;\n  ref_year: number;\n  ref_month: number;\n  amount: number | string;\n  type: string;\n  Description: string;\n  date: Date | string;\n}\n\nexport const PaymentMonthly = () => {\n  const { userId } = useParams<{ userId: string }>();\n  const [payments, setPayments] = useState<IPaymentMonthly[]>([]);\n  const [selectedYear, setSelectedYear] = useState<number | 'all'>(new Date().getFullYear());\n\n  const isUserIdValid = userId && !isNaN(parseInt(userId));\n  const apiUrl = isUserIdValid\n    ? getURI(`${API.paymentMonthly}/${userId}`)\n    : undefined;\n\n  const {\n    data: paymentsData,\n    error: paymentsError,\n    loading: paymentsLoading\n  } = useFetch<IPaymentMonthly[]>({\n    method: 'GET',\n    url: apiUrl\n  });\n\n  useEffect(() => {\n    if (paymentsData) {\n      setPayments(Array.isArray(paymentsData) ? paymentsData : []);\n    } else if (paymentsError) {\n      setPayments([]); // Clear payments on error\n    }\n  }, [paymentsData, paymentsError]);\n\n  if (paymentsLoading) {\n    return (\n      <Box\n        display=\"flex\"\n        justifyContent=\"center\"\n        alignItems=\"center\"\n        minHeight=\"400px\"\n      >\n        <CircularProgress />\n      </Box>\n    );\n  }\n\n  // Format month\n  const formatMonth = (month: number) => {\n    const months = [\n      'Janeiro',\n      'Fevereiro',\n      'Março',\n      'Abril',\n      'Maio',\n      'Junho',\n      'Julho',\n      'Agosto',\n      'Setembro',\n      'Outubro',\n      'Novembro',\n      'Dezembro'\n    ];\n    return months[month - 1] || `Mês ${month}`;\n  };\n\n  // Parse amount\n  const parseAmount = (amount: any): number => {\n    if (!amount || amount === '') return 0;\n    if (typeof amount === 'number') return amount;\n    try {\n      return parseFloat(amount.toString().replace(',', '.'));\n    } catch (error) {\n      console.error('Error parsing amount:', amount, error);\n      return 0;\n    }\n  };\n\n  // Get available years from payments\n  // const getAvailableYears = (): number[] => {\n  //   const years = [...new Set(payments.map(p => p.ref_year))];\n  //   return years.sort((a, b) => b - a); // Sort descending (newest first)\n  // };\n\n  const getAvailableYears = (): number[] => {\n  const yearsSet = new Set(payments.map(p => p.ref_year));\n  const yearsArray = Array.from(yearsSet);\n  return yearsArray.sort((a, b) => b - a); // Sort descending (newest first)\n};\n\n  // Filter payments by selected year\n  const getFilteredPayments = (): IPaymentMonthly[] => {\n    if (selectedYear === 'all') {\n      return payments;\n    }\n    return payments.filter(payment => payment.ref_year === selectedYear);\n  };\n\n  // Calculate financial summary based on filtered payments\n  const getFinancialSummary = () => {\n    const filteredPayments = getFilteredPayments();\n    const totalAmount = filteredPayments.reduce(\n      (sum, p) => sum + parseAmount(p.amount),\n      0\n    );\n\n    const monthlyStatus = filteredPayments\n      .sort((a, b) => a.ref_year - b.ref_year || a.ref_month - b.ref_month)\n      .map((payment) => ({\n        year: payment.ref_year,\n        month: payment.ref_month,\n        monthName: formatMonth(payment.ref_month),\n        amount: parseAmount(payment.amount),\n        type: payment.type || 'N/A',\n        description: payment.Description || 'N/A',\n        date: payment.date\n      }));\n\n    return {\n      total: filteredPayments.length,\n      totalAmount,\n      monthlyStatus\n    };\n  };\n\n  const financialSummary = getFinancialSummary();\n  const availableYears = getAvailableYears();\n  const filteredPayments = getFilteredPayments();\n\n  // Render invalid userId error\n  if (!isUserIdValid) {\n    console.error('Invalid userId:', userId);\n    return (\n      <Alert severity=\"error\">\n        ID de usuário inválido. Por favor, forneça um ID válido.\n      </Alert>\n    );\n  }\n\n  // Render loading state\n  if (paymentsLoading) {\n    return (\n      <Box display=\"flex\" justifyContent=\"center\" p={3}>\n        <CircularProgress />\n      </Box>\n    );\n  }\n\n  // Render error state\n  if (paymentsError) {\n    let errorMessage = 'Erro ao carregar histórico de pagamentos.';\n    if (paymentsError.message.includes('not valid JSON')) {\n      errorMessage =\n        'Erro: A resposta do servidor não é um JSON válido. Verifique a configuração da API.';\n    } else if (paymentsError.message === 'Unauthorized') {\n      errorMessage = 'Acesso não autorizado. Por favor, faça login novamente.';\n    } else if (paymentsError.message === 'Forbidden resource') {\n      errorMessage =\n        'Acesso proibido. Você não tem permissão para visualizar esses dados.';\n    } else if (paymentsError.message) {\n      errorMessage += ` Detalhes: ${paymentsError.message}`;\n    }\n    return (\n      <Alert severity=\"error\">\n        {errorMessage} Tente novamente mais tarde ou contate o suporte.\n      </Alert>\n    );\n  }\n\n  const yearCurrent = new Date().getFullYear();\n  const monthCurrent = new Date().getMonth() + 1;\n\n  // Render empty state\n  if (payments.length === 0) {\n    return (\n      <Alert severity=\"info\">\n        Nenhum registro de pagamento encontrado para este piloto.\n      </Alert>\n    );\n  }\n\n  return (\n    <>\n      {/* Year Filter */}\n      <Card elevation={2} sx={{ mb: 2 }}>\n        <CardContent>\n          <Box display=\"flex\" alignItems=\"center\" gap={2}>\n            <Typography variant=\"h6\" color=\"primary\">\n              Filtrar por Ano:\n            </Typography>\n            <FormControl size=\"small\" sx={{ minWidth: 150 }}>\n              <InputLabel id=\"year-select-label\">Ano</InputLabel>\n              <Select\n                labelId=\"year-select-label\"\n                value={selectedYear}\n                label=\"Ano\"\n                onChange={(e) => setSelectedYear(e.target.value as number | {yearCurrent})}\n              >\n                <MenuItem value=\"all\">Todos os Anos</MenuItem>\n                {availableYears.map((year) => (\n                  <MenuItem key={year} value={year}>\n                    {year}\n                  </MenuItem>\n                ))}\n              </Select>\n            </FormControl>\n            <Typography variant=\"body2\" color=\"textSecondary\">\n              {selectedYear === 'all' \n                ? `Mostrando ${payments.length} registros de todos os anos`\n                : `Mostrando ${filteredPayments.length} registros de ${selectedYear}`\n              }\n            </Typography>\n          </Box>\n        </CardContent>\n      </Card>\n\n      <Card elevation={3}>\n        <Accordion>\n          <AccordionSummary\n            expandIcon={<ExpandMoreIcon />}\n            aria-controls=\"panel1-content\"\n            id=\"panel1-header\"\n          >\n            <Box display=\"flex\" alignItems=\"center\" mb={3}>\n              <PaymentIcon sx={{ fontSize: 32, color: blue[500], mr: 2 }} />\n              <Typography variant=\"h5\" color=\"primary\">\n                Resumo Financeiro {selectedYear !== 'all' && `- ${selectedYear}`}\n              </Typography>\n            </Box>\n          </AccordionSummary>\n          <AccordionDetails>\n            <TableContainer component={Paper} elevation={0}>\n              <Table>\n                <TableHead>\n                  <TableRow>\n                    <TableCell sx={{ color: blue[600] }}>\n                      <strong>Mês</strong>\n                    </TableCell>\n                    <TableCell sx={{ color: blue[600] }}>\n                      <strong>Tipo</strong>\n                    </TableCell>\n                    <TableCell sx={{ color: blue[600] }}>\n                      <strong>Valor</strong>\n                    </TableCell>\n                    <TableCell sx={{ color: blue[600] }}>\n                      <strong>Descrição</strong>\n                    </TableCell>\n                    <TableCell sx={{ color: blue[600] }}>\n                      <strong>Data</strong>\n                    </TableCell>\n                  </TableRow>\n                </TableHead>\n                <TableBody>\n                  {filteredPayments\n                    .sort(\n                      (a, b) =>\n                        a.ref_year - b.ref_year || a.ref_month - b.ref_month\n                    )\n                    .map((payment, index) => (\n                      <TableRow key={`${payment.id || index}`} hover>\n                        <TableCell>\n                          {payment.ref_month === monthCurrent &&\n                            payment.ref_year === yearCurrent ? (\n                            <Chip\n                              label={formatMonth(payment.ref_month)}\n                              size=\"small\"\n                              variant=\"outlined\"\n                              sx={{\n                                backgroundColor: blue[100],\n                                color: blue[800],\n                                '&:hover': { backgroundColor: blue[200] },\n                                fontWeight: 'bold',\n                                width: 150\n                              }}\n                              title={`${payment.ref_year}`}\n                            />\n                          ) : (\n                            <Chip\n                              label={formatMonth(payment.ref_month)}\n                              size=\"small\"\n                              variant=\"outlined\"\n                              sx={{\n                                backgroundColor: blue[50],\n                                color: blue[700],\n                                '&:hover': { backgroundColor: blue[100] },\n                                width: 150\n                              }}\n                              title={`${payment.ref_year}`}\n                            />\n                          )}\n                        </TableCell>\n                        <TableCell>\n                          {payment.type ? (\n                            <Chip\n                              label={payment.type}\n                              size=\"small\"\n                              variant=\"outlined\"\n                              sx={{\n                                backgroundColor: lime[50],\n                                color: lime[800],\n                                '&:hover': { backgroundColor: lime[100] },\n                                fontWeight: 'bold',\n                                width: 150\n                              }}\n                            />\n                          ) : (\n                            ''\n                          )}\n                        </TableCell>\n                        <TableCell>\n                          {parseAmount(payment.amount) > 0 ? (\n                            <Chip\n                              label={payment.amount}\n                              size=\"small\"\n                              variant=\"outlined\"\n                              sx={{\n                                backgroundColor: green[50],\n                                color: green[800],\n                                '&:hover': { backgroundColor: green[100] },\n                                fontWeight: 'bold',\n                                width: 150\n                              }}\n                            />\n                          ) : (\n                            <Chip\n                              label={payment.amount}\n                              size=\"medium\"\n                              variant=\"outlined\"\n                              sx={{\n                                color: blueGrey[300],\n                                width: 150\n                              }}\n                            />\n                          )}\n                        </TableCell>\n                        <TableCell>\n                          <Typography variant=\"body2\">\n                            {payment.Description &&\n                              payment.Description.trim() !== ''\n                              ? payment.Description\n                              : ''}\n                          </Typography>\n                        </TableCell>\n                        <TableCell>\n                          <Typography variant=\"body2\">\n                            {payment.date\n                              ? new Date(payment.date).toLocaleDateString(\n                                'pt-BR'\n                              )\n                              : ''}\n                          </Typography>\n                        </TableCell>\n                      </TableRow>\n                    ))}\n                </TableBody>\n\n                <TableBody>\n                  <TableRow>\n                    <TableCell colSpan={5}>\n                      <Box\n                        textAlign=\"center\"\n                        p={2}\n                        bgcolor={blue[50]}\n                        borderRadius={2}\n                      >\n                        <Typography variant=\"h5\" color={blue[600]}>\n                          R$ {financialSummary.totalAmount.toFixed(2)}\n                        </Typography>\n                        <Typography variant=\"body2\" color=\"textSecondary\">\n                          Valor Total Pago {selectedYear !== 'all' && `em ${selectedYear}`}\n                        </Typography>\n                      </Box>\n                    </TableCell>\n                  </TableRow>\n                </TableBody>\n              </Table>\n            </TableContainer>\n          </AccordionDetails>\n        </Accordion>\n      </Card>\n\n      {filteredPayments.length > 0 && (\n        <Card elevation={3} sx={{ mt: 3 }}>\n          <CardContent>\n            <Box\n              display=\"flex\"\n              alignItems=\"center\"\n              justifyContent=\"center\"\n              textAlign={'center'}\n              mb={3}\n            >\n              <PaymentQRCode valor={Number(filteredPayments[0].amount)} />\n            </Box>\n          </CardContent>\n        </Card>\n      )}\n    </>\n  );\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}