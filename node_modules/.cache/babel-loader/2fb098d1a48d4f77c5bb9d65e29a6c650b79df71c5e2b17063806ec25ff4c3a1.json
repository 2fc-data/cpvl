{"ast":null,"code":"var _jsxFileName = \"/home/fernando/Documents/develop/www/cpvl/v4_cpvl_2025/cpvl-spa/src/components/PaymentMonthly/PaymentMonthly.component.tsx\",\n  _s = $RefreshSig$();\nimport { Payment as PaymentIcon } from '@mui/icons-material';\nimport { Box, Typography, Card, CardContent, Chip, Alert, Table, TableBody, TableCell, TableContainer, TableHead, TableRow, Paper, CircularProgress } from '@mui/material';\nimport { blue } from '@mui/material/colors';\nimport { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { useFetch } from '../../hooks';\nimport { API, getURI } from '../../services';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n// interface PaymentMonthlyProps {\n//   userId: string;\n// }\n// export const PaymentMonthly: React.FC<PaymentMonthlyProps> = ({ userId }) => {\nexport const PaymentMonthly = () => {\n  _s();\n  const {\n    userId\n  } = useParams();\n  const [payments, setPayments] = useState([]);\n\n  // Validate userId and construct API URL\n  const isUserIdValid = userId && !isNaN(parseInt(userId));\n  const apiUrl = isUserIdValid ?\n  // ? getURI(`${API.paymentMonthly}?userId=${userId}`)\n  getURI(`${API.paymentMonthly}/${userId}`) : undefined;\n  console.log(`${API.paymentMonthly}/${userId}`);\n  const {\n    data: paymentsData,\n    error: paymentsError,\n    loading: paymentsLoading\n  } = useFetch({\n    method: 'GET',\n    url: apiUrl\n  });\n  useEffect(() => {\n    if (paymentsData) {\n      setPayments(Array.isArray(paymentsData) ? paymentsData : []);\n    } else if (paymentsError) {\n      setPayments([]); // Clear payments on error\n    }\n  }, [paymentsData, paymentsError]);\n  if (paymentsLoading) {\n    return /*#__PURE__*/_jsxDEV(Box, {\n      display: \"flex\",\n      justifyContent: \"center\",\n      alignItems: \"center\",\n      minHeight: \"400px\",\n      children: /*#__PURE__*/_jsxDEV(CircularProgress, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 7\n    }, this);\n  }\n\n  // Format month\n  const formatMonth = month => {\n    const months = ['Janeiro', 'Fevereiro', 'Março', 'Abril', 'Maio', 'Junho', 'Julho', 'Agosto', 'Setembro', 'Outubro', 'Novembro', 'Dezembro'];\n    return months[month - 1] || `Mês ${month}`;\n  };\n\n  // Parse amount\n  const parseAmount = amount => {\n    if (!amount || amount === '') return 0;\n    if (typeof amount === 'number') return amount;\n    try {\n      return parseFloat(amount.toString().replace(',', '.'));\n    } catch (error) {\n      console.error('Error parsing amount:', amount, error);\n      return 0;\n    }\n  };\n\n  // Calculate financial summary\n  // const getFinancialSummary = () => {\n  //   const totalAmount = payments.reduce(\n  //     (sum, p) => sum + parseAmount(p.amount),\n  //     0\n  //   );\n\n  //   const monthlyStatus = payments\n  //     .sort((a, b) => b.ref_year - a.ref_year || b.ref_month - a.ref_month)\n  //     .map((payment) => ({\n  //       year: payment.ref_year,\n  //       month: payment.ref_month,\n  //       monthName: formatMonth(payment.ref_month),\n  //       amount: parseAmount(payment.amount),\n  //       type: payment.type || 'N/A',\n  //       description: payment.Description || 'N/A',\n  //       date: payment.date\n  //     }));\n\n  //   return {\n  //     total: payments.length,\n  //     totalAmount,\n  //     monthlyStatus\n  //   };\n  // };\n\n  // const financialSummary = getFinancialSummary();\n\n  // Render invalid userId error\n  if (!isUserIdValid) {\n    console.error('Invalid userId:', userId);\n    return /*#__PURE__*/_jsxDEV(Alert, {\n      severity: \"error\",\n      children: \"ID de usu\\xE1rio inv\\xE1lido. Por favor, forne\\xE7a um ID v\\xE1lido.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 149,\n      columnNumber: 7\n    }, this);\n  }\n\n  // Render loading state\n  if (paymentsLoading) {\n    return /*#__PURE__*/_jsxDEV(Box, {\n      display: \"flex\",\n      justifyContent: \"center\",\n      p: 3,\n      children: /*#__PURE__*/_jsxDEV(CircularProgress, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 159,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 158,\n      columnNumber: 7\n    }, this);\n  }\n\n  // Render error state\n  if (paymentsError) {\n    let errorMessage = 'Erro ao carregar histórico de pagamentos.';\n    if (paymentsError.message.includes('not valid JSON')) {\n      errorMessage = 'Erro: A resposta do servidor não é um JSON válido. Verifique a configuração da API.';\n    } else if (paymentsError.message === 'Unauthorized') {\n      errorMessage = 'Acesso não autorizado. Por favor, faça login novamente.';\n    } else if (paymentsError.message === 'Forbidden resource') {\n      errorMessage = 'Acesso proibido. Você não tem permissão para visualizar esses dados.';\n    } else if (paymentsError.message) {\n      errorMessage += ` Detalhes: ${paymentsError.message}`;\n    }\n    return /*#__PURE__*/_jsxDEV(Alert, {\n      severity: \"error\",\n      children: [errorMessage, \" Tente novamente mais tarde ou contate o suporte.\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 179,\n      columnNumber: 7\n    }, this);\n  }\n  const monthCurrent = new Date().getMonth();\n  const yearCurrent = new Date().getFullYear();\n\n  // Render empty state\n  if (payments.length === 0) {\n    return /*#__PURE__*/_jsxDEV(Alert, {\n      severity: \"info\",\n      children: \"Nenhum registro de pagamento encontrado para este piloto.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 191,\n      columnNumber: 7\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(Card, {\n      elevation: 3,\n      children: /*#__PURE__*/_jsxDEV(CardContent, {\n        children: [/*#__PURE__*/_jsxDEV(Box, {\n          display: \"flex\",\n          alignItems: \"center\",\n          mb: 3,\n          children: [/*#__PURE__*/_jsxDEV(PaymentIcon, {\n            sx: {\n              fontSize: 32,\n              color: blue[500],\n              mr: 2\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 203,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Typography, {\n            variant: \"h5\",\n            component: \"h2\",\n            children: [\"Hist\\xF3rico de Pagamentos - \", userId]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 204,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 202,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(TableContainer, {\n          component: Paper,\n          elevation: 0,\n          children: /*#__PURE__*/_jsxDEV(Table, {\n            children: [/*#__PURE__*/_jsxDEV(TableHead, {\n              children: /*#__PURE__*/_jsxDEV(TableRow, {\n                children: [/*#__PURE__*/_jsxDEV(TableCell, {\n                  children: /*#__PURE__*/_jsxDEV(\"strong\", {\n                    children: \"M\\xEAs\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 213,\n                    columnNumber: 21\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 212,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n                  children: /*#__PURE__*/_jsxDEV(\"strong\", {\n                    children: \"Tipo\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 216,\n                    columnNumber: 21\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 215,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n                  children: /*#__PURE__*/_jsxDEV(\"strong\", {\n                    children: \"Valor\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 219,\n                    columnNumber: 21\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 218,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n                  children: /*#__PURE__*/_jsxDEV(\"strong\", {\n                    children: \"Descri\\xE7\\xE3o\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 222,\n                    columnNumber: 21\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 221,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n                  children: /*#__PURE__*/_jsxDEV(\"strong\", {\n                    children: \"Data\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 225,\n                    columnNumber: 21\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 224,\n                  columnNumber: 19\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 211,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 210,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(TableBody, {\n              children: payments.sort((a, b) =>\n              // b.ref_year - a.ref_year || b.ref_month - a.ref_month\n              a.ref_year - b.ref_year || a.ref_month - b.ref_month).map((payment, index) => /*#__PURE__*/_jsxDEV(TableRow, {\n                hover: true,\n                children: [/*#__PURE__*/_jsxDEV(TableCell, {\n                  children: /*#__PURE__*/_jsxDEV(Typography, {\n                    variant: \"body2\",\n                    children: [formatMonth(payment.ref_month), \" \", payment.ref_year]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 239,\n                    columnNumber: 25\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 238,\n                  columnNumber: 23\n                }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n                  children: payment.type ? /*#__PURE__*/_jsxDEV(Typography, {\n                    variant: \"body2\",\n                    children: payment.type\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 245,\n                    columnNumber: 27\n                  }, this) : /*#__PURE__*/_jsxDEV(Typography, {\n                    variant: \"body2\",\n                    color: \"textSecondary\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 249,\n                    columnNumber: 27\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 243,\n                  columnNumber: 23\n                }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n                  children: parseFloat(parseAmount(payment.amount).toFixed(2)) > 0 ? /*#__PURE__*/_jsxDEV(Chip, {\n                    label: payment.amount,\n                    size: \"medium\",\n                    variant: \"outlined\",\n                    color: \"success\",\n                    sx: {\n                      fontWeight: \"bold\"\n                    }\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 256,\n                    columnNumber: 27\n                  }, this) : !payment.amount && payment.ref_month === monthCurrent && payment.ref_year === yearCurrent ? /*#__PURE__*/_jsxDEV(Chip, {\n                    label: payment.amount,\n                    size: \"medium\",\n                    variant: \"outlined\",\n                    color: \"error\",\n                    sx: {\n                      fontWeight: \"bold\"\n                    }\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 264,\n                    columnNumber: 27\n                  }, this) : ''\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 254,\n                  columnNumber: 23\n                }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n                  children: /*#__PURE__*/_jsxDEV(Typography, {\n                    variant: \"body2\",\n                    children: payment.Description && payment.Description.trim() !== '' ? payment.Description : ''\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 276,\n                    columnNumber: 25\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 275,\n                  columnNumber: 23\n                }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n                  children: /*#__PURE__*/_jsxDEV(Typography, {\n                    variant: \"body2\",\n                    children: payment.date ? new Date(payment.date).toLocaleDateString('pt-BR') : ''\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 284,\n                    columnNumber: 25\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 283,\n                  columnNumber: 23\n                }, this)]\n              }, `${payment.id || index}`, true, {\n                fileName: _jsxFileName,\n                lineNumber: 237,\n                columnNumber: 21\n              }, this))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 229,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 209,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 208,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 200,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 199,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n};\n_s(PaymentMonthly, \"2jZ4sVNACGhGmxUfB3/1uZhP5bM=\", false, function () {\n  return [useParams, useFetch];\n});\n_c = PaymentMonthly;\nvar _c;\n$RefreshReg$(_c, \"PaymentMonthly\");","map":{"version":3,"names":["Payment","PaymentIcon","Box","Typography","Card","CardContent","Chip","Alert","Table","TableBody","TableCell","TableContainer","TableHead","TableRow","Paper","CircularProgress","blue","useEffect","useState","useParams","useFetch","API","getURI","jsxDEV","_jsxDEV","Fragment","_Fragment","PaymentMonthly","_s","userId","payments","setPayments","isUserIdValid","isNaN","parseInt","apiUrl","paymentMonthly","undefined","console","log","data","paymentsData","error","paymentsError","loading","paymentsLoading","method","url","Array","isArray","display","justifyContent","alignItems","minHeight","children","fileName","_jsxFileName","lineNumber","columnNumber","formatMonth","month","months","parseAmount","amount","parseFloat","toString","replace","severity","p","errorMessage","message","includes","monthCurrent","Date","getMonth","yearCurrent","getFullYear","length","elevation","mb","sx","fontSize","color","mr","variant","component","sort","a","b","ref_year","ref_month","map","payment","index","hover","type","toFixed","label","size","fontWeight","Description","trim","date","toLocaleDateString","id","_c","$RefreshReg$"],"sources":["/home/fernando/Documents/develop/www/cpvl/v4_cpvl_2025/cpvl-spa/src/components/PaymentMonthly/PaymentMonthly.component.tsx"],"sourcesContent":["import {\n  Payment as PaymentIcon\n} from '@mui/icons-material';\nimport {\n  Box,\n  Typography,\n  Card,\n  CardContent,\n  Chip,\n  Alert,\n  Table,\n  TableBody,\n  TableCell,\n  TableContainer,\n  TableHead,\n  TableRow,\n  Paper,\n  CircularProgress,\n} from '@mui/material';\nimport { blue, green } from '@mui/material/colors';\nimport { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { useFetch } from '../../hooks';\nimport { API, getURI } from '../../services';\n\ninterface IPaymentMonthly {\n  id?: number;\n  userId: number;\n  ref_year: number;\n  ref_month: number;\n  amount: number | string;\n  type: string;\n  Description: string;\n  date: Date | string;\n}\n\n// interface PaymentMonthlyProps {\n//   userId: string;\n// }\n\n// export const PaymentMonthly: React.FC<PaymentMonthlyProps> = ({ userId }) => {\n\nexport const PaymentMonthly = () => {\n  const { userId } = useParams<{ userId: string }>();\n  const [payments, setPayments] = useState<IPaymentMonthly[]>([]);\n\n  // Validate userId and construct API URL\n  const isUserIdValid = userId && !isNaN(parseInt(userId));\n  const apiUrl = isUserIdValid\n    ? // ? getURI(`${API.paymentMonthly}?userId=${userId}`)\n    getURI(`${API.paymentMonthly}/${userId}`)\n    : undefined;\n  console.log(`${API.paymentMonthly}/${userId}`);\n\n  const {\n    data: paymentsData,\n    error: paymentsError,\n    loading: paymentsLoading\n  } = useFetch<IPaymentMonthly[]>({\n    method: 'GET',\n    url: apiUrl\n  });\n\n  useEffect(() => {\n    if (paymentsData) {\n      setPayments(Array.isArray(paymentsData) ? paymentsData : []);\n    } else if (paymentsError) {\n      setPayments([]); // Clear payments on error\n    }\n  }, [paymentsData, paymentsError]);\n\n\n  if (paymentsLoading) {\n    return (\n      <Box\n        display=\"flex\"\n        justifyContent=\"center\"\n        alignItems=\"center\"\n        minHeight=\"400px\"\n      >\n        <CircularProgress />\n      </Box>\n    );\n  }\n\n  // Format month\n  const formatMonth = (month: number) => {\n    const months = [\n      'Janeiro',\n      'Fevereiro',\n      'Março',\n      'Abril',\n      'Maio',\n      'Junho',\n      'Julho',\n      'Agosto',\n      'Setembro',\n      'Outubro',\n      'Novembro',\n      'Dezembro'\n    ];\n    return months[month - 1] || `Mês ${month}`;\n  };\n\n  // Parse amount\n  const parseAmount = (amount: any): number => {\n    if (!amount || amount === '') return 0;\n    if (typeof amount === 'number') return amount;\n    try {\n      return parseFloat(amount.toString().replace(',', '.'));\n    } catch (error) {\n      console.error('Error parsing amount:', amount, error);\n      return 0;\n    }\n  };\n\n  // Calculate financial summary\n  // const getFinancialSummary = () => {\n  //   const totalAmount = payments.reduce(\n  //     (sum, p) => sum + parseAmount(p.amount),\n  //     0\n  //   );\n\n  //   const monthlyStatus = payments\n  //     .sort((a, b) => b.ref_year - a.ref_year || b.ref_month - a.ref_month)\n  //     .map((payment) => ({\n  //       year: payment.ref_year,\n  //       month: payment.ref_month,\n  //       monthName: formatMonth(payment.ref_month),\n  //       amount: parseAmount(payment.amount),\n  //       type: payment.type || 'N/A',\n  //       description: payment.Description || 'N/A',\n  //       date: payment.date\n  //     }));\n\n  //   return {\n  //     total: payments.length,\n  //     totalAmount,\n  //     monthlyStatus\n  //   };\n  // };\n\n  // const financialSummary = getFinancialSummary();\n\n  // Render invalid userId error\n  if (!isUserIdValid) {\n    console.error('Invalid userId:', userId);\n    return (\n      <Alert severity=\"error\">\n        ID de usuário inválido. Por favor, forneça um ID válido.\n      </Alert>\n    );\n  }\n\n  // Render loading state\n  if (paymentsLoading) {\n    return (\n      <Box display=\"flex\" justifyContent=\"center\" p={3}>\n        <CircularProgress />\n      </Box>\n    );\n  }\n\n  // Render error state\n  if (paymentsError) {\n    let errorMessage = 'Erro ao carregar histórico de pagamentos.';\n    if (paymentsError.message.includes('not valid JSON')) {\n      errorMessage =\n        'Erro: A resposta do servidor não é um JSON válido. Verifique a configuração da API.';\n    } else if (paymentsError.message === 'Unauthorized') {\n      errorMessage = 'Acesso não autorizado. Por favor, faça login novamente.';\n    } else if (paymentsError.message === 'Forbidden resource') {\n      errorMessage =\n        'Acesso proibido. Você não tem permissão para visualizar esses dados.';\n    } else if (paymentsError.message) {\n      errorMessage += ` Detalhes: ${paymentsError.message}`;\n    }\n    return (\n      <Alert severity=\"error\">\n        {errorMessage} Tente novamente mais tarde ou contate o suporte.\n      </Alert>\n    );\n  }\n\n  const monthCurrent = new Date().getMonth();\n  const yearCurrent = new Date().getFullYear()\n\n  // Render empty state\n  if (payments.length === 0) {\n    return (\n      <Alert severity=\"info\">\n        Nenhum registro de pagamento encontrado para este piloto.\n      </Alert>\n    );\n  }\n\n  return (\n    <>\n      <Card elevation={3}>\n        <CardContent>\n\n          <Box display=\"flex\" alignItems=\"center\" mb={3}>\n            <PaymentIcon sx={{ fontSize: 32, color: blue[500], mr: 2 }} />\n            <Typography variant=\"h5\" component=\"h2\">\n              Histórico de Pagamentos - {userId}\n            </Typography>\n          </Box>\n          <TableContainer component={Paper} elevation={0}>\n            <Table>\n              <TableHead>\n                <TableRow>\n                  <TableCell>\n                    <strong>Mês</strong>\n                  </TableCell>\n                  <TableCell>\n                    <strong>Tipo</strong>\n                  </TableCell>\n                  <TableCell>\n                    <strong>Valor</strong>\n                  </TableCell>\n                  <TableCell>\n                    <strong>Descrição</strong>\n                  </TableCell>\n                  <TableCell>\n                    <strong>Data</strong>\n                  </TableCell>\n                </TableRow>\n              </TableHead>\n              <TableBody>\n                {payments\n                  .sort(\n                    (a, b) =>\n                      // b.ref_year - a.ref_year || b.ref_month - a.ref_month\n                      a.ref_year - b.ref_year || a.ref_month - b.ref_month\n                  )\n                  .map((payment, index) => (\n                    <TableRow key={`${payment.id || index}`} hover>\n                      <TableCell>\n                        <Typography variant=\"body2\">\n                          {formatMonth(payment.ref_month)} {payment.ref_year}\n                        </Typography>\n                      </TableCell>\n                      <TableCell>\n                        {payment.type ? (\n                          <Typography variant=\"body2\">\n                            {payment.type}\n                          </Typography>\n                        ) : (\n                          <Typography variant=\"body2\" color=\"textSecondary\">\n\n                          </Typography>\n                        )}\n                      </TableCell>\n                      <TableCell>\n                        {parseFloat(parseAmount(payment.amount).toFixed(2)) > 0 ? (\n                          <Chip\n                            label={payment.amount}\n                            size=\"medium\"\n                            variant=\"outlined\"\n                            color=\"success\"                            \n                            sx={{ fontWeight:\"bold\" }}\n                          />\n                        ) : !payment.amount && payment.ref_month === monthCurrent && payment.ref_year === yearCurrent ? (\n                          <Chip\n                            label={payment.amount}\n                            size='medium'\n                            variant=\"outlined\"\n                            color=\"error\"\n                            sx={{ fontWeight:\"bold\" }}\n                          />\n                        ) : \n                        ('')\n                        }\n                      </TableCell>\n                      <TableCell>\n                        <Typography variant=\"body2\">\n                          {payment.Description &&\n                            payment.Description.trim() !== ''\n                            ? payment.Description\n                            : ''}\n                        </Typography>\n                      </TableCell>\n                      <TableCell>\n                        <Typography variant=\"body2\">\n                          {payment.date\n                            ? new Date(payment.date).toLocaleDateString('pt-BR')\n                            : ''}\n                        </Typography>\n                      </TableCell>\n                    </TableRow>\n                  ))}\n              </TableBody>\n            </Table>\n          </TableContainer>\n        </CardContent>\n      </Card>\n    </>\n  );\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}