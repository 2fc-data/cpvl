{"ast":null,"code":"// src/index.ts\nimport React2 from \"react\";\n\n// src/Component.class.ts\nimport React from \"react\";\nimport { QrcodeCanvas, QrcodeSVG } from \"react-qrcode-pretty\";\nvar Component = class extends React.Component {\n  render() {\n    return React.createElement(this.props.qrcodeType === \"canvas\" ? QrcodeCanvas : QrcodeSVG, {\n      ...this.props.settings,\n      value: this.props.payload\n    });\n  }\n  componentDidMount() {\n    if (typeof this.props.onLoad === \"function\") {\n      this.props.onLoad(this.props.payload || \"\");\n    }\n  }\n  componentDidUpdate() {\n    if (typeof this.props.onLoad === \"function\") {\n      this.props.onLoad(this.props.payload || \"\");\n    }\n  }\n  componentWillUnmount() {\n    if (typeof this.props.onLoad === \"function\") {\n      this.props.onLoad(\"\");\n    }\n  }\n};\n\n// src/PIX.class.ts\nvar _PIX = class _PIX {\n  /*\n   *  Adiciona zeros a esquerda quando necessario para manter derterminado comprimento\n   */\n  static padder(subject) {\n    let lenght = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 2;\n    const target = subject.toString();\n    let complement = \"\";\n    if (target.length > lenght) {\n      throw new Error(`O comprimento de '${subject}' \\xE9 maior que ${lenght}`);\n    }\n    for (let c = 0; c < lenght; c++) {\n      complement += \"0\";\n    }\n    return (complement + target).slice(target.length);\n  }\n  /**\n   * Padronizacao EVM Brasil QrCode\n   */\n  static EVM(ID, content) {\n    if (ID > 99) throw new Error(\"O ID do EVM pode ter no m\\xE1ximo duas casas decimais!\");\n    if (content.length > 99) throw new Error(\"O conte\\xFAdo do EVM pode ter no m\\xE1ximo noventa e nove caracters e espacos!\");\n    return _PIX.padder(ID) + _PIX.padder(content.length) + content;\n  }\n  /**\n   * Altera ou remove caracteres acentuados e especiais \n   */\n  static removeAccent(subject) {\n    let extra_filter = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : /[^\\w\\s]/gim;\n    return !!String.prototype.normalize ? subject.normalize(\"NFD\").replace(/[\\u0300-\\u036f]/g, \"\").replace(extra_filter, \"\") : subject.replace(extra_filter, \"\");\n  }\n  /**\n   * Calcula o Checksum CRC16\n   */\n  static CRC16(subject) {\n    let result = 65535;\n    if (subject.length > 0) {\n      for (let offset = 0; offset < subject.length; offset++) {\n        result ^= subject.charCodeAt(offset) << 8;\n        for (let bitwise = 0; bitwise < 8; bitwise++) {\n          if ((result <<= 1) & 65536) result ^= 4129;\n          result &= 65535;\n        }\n      }\n    }\n    return result.toString(16).toUpperCase();\n  }\n  /**\n   * Verifica se o formato da chave pix parece valido\n   */\n  static verifyPixKey(pixkey) {\n    return /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/i.test(pixkey) ||\n    // Chave do tipo email\n    /^[0-9]{11}$/i.test(pixkey) ||\n    // Chave do tipo CPF\n    /^[0-9]{14}$/i.test(pixkey) ||\n    // Chave do tipo CNPJ\n    /^\\+[0-9]{12,13}$/i.test(pixkey) ||\n    // Chave do tipo telefone\n    /^[\\w-]{32,36}$/i.test(pixkey);\n  }\n  /* METODOS DA INSTANCIA */\n  /**\n   * Carrega os dados do PIX\n   */\n  constructor(_ref) {\n    let {\n      pixkey,\n      merchant,\n      city,\n      cep,\n      code,\n      amount,\n      ignoreErrors = false\n    } = _ref;\n    if (!ignoreErrors) {\n      if (!pixkey || !merchant || !city) throw new Error(\"As propriedades: pixkey (chave pix), merchant (nome do recebedor) e city (cidade do recebedor), s\\xE3o obigat\\xF3rios!\");\n      if (!_PIX.verifyPixKey(pixkey)) throw new Error(`A chave PIX (pixkey) '${pixkey}' parece ser inv\\xE1lida! Exemplos de formatos v\\xE1lidos: EMAIL: fulano_da_silva.recebedor@example.com | CPF: 12345678900 | CNPJ: 00038166000105 | TELEFONE: +5561912345678 | ALEATORIA: 123e4567-e12b-12d1-a456-426655440000`);\n      if (typeof amount === \"number\" && amount <= 0) throw new Error(\"A propriedade amount deve receber um valor num\\xE9rico maior que zero ou nulo!\");\n    }\n    this._props = {\n      pixkey: pixkey.replace(/\\s/gim, \"\").substring(0, 77),\n      merchant: _PIX.removeAccent(merchant, /[^a-z\\s]/gim).substring(0, 80),\n      city: _PIX.removeAccent(city, /[^a-z\\s]/gim).substring(0, 80),\n      cep: cep ? cep.replace(/[^0-9]/gim, \"\").substring(0, 8) : null,\n      code: _PIX.removeAccent(code || \"\", /[^a-z0-9]/gim).substring(0, 25).toUpperCase() || \"***\",\n      amount: amount && amount > 0 ? amount : null,\n      ignoreErrors\n    };\n  }\n  /*\n   * Recupera uma propriedade da instancia\n   */\n  get(prop) {\n    return this._props[prop];\n  }\n  /**\n   * Payload Format Indicator - ID 0\n   */\n  getPayloadFormat() {\n    return _PIX.EVM(0, _PIX.constants.PAYLOAD_FORMAT);\n  }\n  /**\n   * Merchant Account Information - ID 26\n   * > GUI - SubID 0\n   * > KEY - SubID 1\n   */\n  getMerchantAccount() {\n    const gui = _PIX.EVM(0, _PIX.constants.MERCHANT_ACCOUNT_GUI);\n    const key = _PIX.EVM(1, this._props.pixkey);\n    return _PIX.EVM(26, gui + key);\n  }\n  /**\n   * Merchant Category Code - ID 52\n   */\n  getMerchantCategory() {\n    return _PIX.EVM(52, _PIX.constants.MERCHANT_CATEGORY_CODE);\n  }\n  /**\n   * Transaction Currency - ID 53\n   */\n  getTransactionCurrency() {\n    return _PIX.EVM(53, _PIX.constants.TRANSACTION_CURRENCY);\n  }\n  /**\n   * Transaction Amount (optional) - ID 54\n   */\n  getTransactionAmount() {\n    return this._props.amount ? _PIX.EVM(54, this._props.amount.toFixed(2)) : \"\";\n  }\n  /**\n   * Country Code - ID 58\n   */\n  getCountryCode() {\n    return _PIX.EVM(58, _PIX.constants.COUNTRY_CODE);\n  }\n  /**\n   * Merchant Name - ID 59\n   */\n  getMerchantName() {\n    return _PIX.EVM(59, this._props.merchant);\n  }\n  /**\n   * Merchant City - ID 60\n   */\n  getMerchantCity() {\n    return _PIX.EVM(60, this._props.city);\n  }\n  /**\n   * Merchant CEP (optional) - ID 61\n   */\n  getMerchantCep() {\n    return this._props.cep && /^[0-9]{8}$/.test(this._props.cep) ? _PIX.EVM(61, this._props.cep) : \"\";\n  }\n  /**\n   * Additional Data Field Template - ID 62\n   * > Reference Label - SubID 5\n   */\n  getAdditionalData() {\n    const label = _PIX.EVM(5, this._props.code);\n    return _PIX.EVM(62, label);\n  }\n  /**\n   * Init CRC16 - ID 63\n   */\n  getInitCRC16() {\n    return \"63\" + _PIX.padder(_PIX.constants.CRC16_LENGTH);\n  }\n  /**\n   * Gera o payload que pode ser usado para fazer o qrcode\n   */\n  payload() {\n    const payload2 = [this.getPayloadFormat(), this.getMerchantAccount(), this.getMerchantCategory(), this.getTransactionCurrency(), this.getTransactionAmount(), this.getCountryCode(), this.getMerchantName(), this.getMerchantCity(), this.getMerchantCep(), this.getAdditionalData(), this.getInitCRC16()].join(\"\");\n    return payload2 + _PIX.padder(_PIX.CRC16(payload2), _PIX.constants.CRC16_LENGTH);\n  }\n  /**\n   * Exibe o payload\n   */\n  toString() {\n    return this.payload();\n  }\n};\n/* ATRIBUTOS E METODOS ESTATICOS */\n/**\n * Constantes de configuracao padrao\n */\n_PIX.constants = {\n  PAYLOAD_FORMAT: \"01\",\n  MERCHANT_ACCOUNT_GUI: \"BR.GOV.BCB.PIX\",\n  MERCHANT_CATEGORY_CODE: \"0000\",\n  TRANSACTION_CURRENCY: \"986\",\n  COUNTRY_CODE: \"BR\",\n  CRC16_LENGTH: 4\n};\nvar PIX = _PIX;\n\n// src/index.ts\nexport * from \"react-qrcode-pretty\";\nfunction payload(props) {\n  const pix = new PIX(props);\n  return pix.payload();\n}\nfunction PixCanvas(_ref2) {\n  let {\n    pixkey,\n    merchant,\n    city,\n    cep,\n    code,\n    amount,\n    ignoreErrors = false,\n    onLoad = _ => {},\n    ...settings\n  } = _ref2;\n  if (typeof settings.size === \"undefined\") {\n    settings.size = 256;\n  }\n  try {\n    return React2.createElement(Component, {\n      payload: payload({\n        pixkey,\n        merchant,\n        city,\n        cep,\n        code,\n        amount,\n        ignoreErrors\n      }),\n      qrcodeType: \"canvas\",\n      settings,\n      onLoad\n    });\n  } catch (error) {\n    if (process.env.NODE_ENV !== \"test\") console.error(error);\n    return React2.createElement(\"div\", {\n      style: {\n        width: settings == null ? void 0 : settings.size,\n        height: settings == null ? void 0 : settings.size,\n        margin: \"10px 0\",\n        display: \"flex\",\n        justifyContent: \"center\",\n        alignItems: \"center\",\n        backgroundColor: \"#e5d5d5\",\n        border: \"solid 1px\",\n        borderRadius: \"10px\",\n        borderColor: \"#440000\",\n        textAlign: \"center\",\n        color: \"#770000\",\n        fontSize: \"18px\",\n        opacity: \"0.75\"\n      }\n    }, \"PIX n\\xE3o pode ser carregado!\");\n  }\n}\nfunction PixSVG(_ref3) {\n  let {\n    pixkey,\n    merchant,\n    city,\n    cep,\n    code,\n    amount,\n    ignoreErrors = false,\n    onLoad = _ => {},\n    ...settings\n  } = _ref3;\n  if (typeof settings.size === \"undefined\") {\n    settings.size = 256;\n  }\n  try {\n    return React2.createElement(Component, {\n      payload: payload({\n        pixkey,\n        merchant,\n        city,\n        cep,\n        code,\n        amount,\n        ignoreErrors\n      }),\n      qrcodeType: \"SVG\",\n      settings,\n      onLoad\n    });\n  } catch (error) {\n    if (process.env.NODE_ENV !== \"test\") console.error(error);\n    return React2.createElement(\"div\", {\n      style: {\n        width: settings == null ? void 0 : settings.size,\n        height: settings == null ? void 0 : settings.size,\n        margin: \"10px 0\",\n        display: \"flex\",\n        justifyContent: \"center\",\n        alignItems: \"center\",\n        backgroundColor: \"#e5d5d5\",\n        border: \"solid 1px\",\n        borderRadius: \"10px\",\n        borderColor: \"#440000\",\n        textAlign: \"center\",\n        color: \"#770000\",\n        fontSize: \"18px\",\n        opacity: \"0.75\"\n      }\n    }, \"PIX n\\xE3o pode ser carregado!\");\n  }\n}\nvar index_default = PixCanvas;\nexport { PixCanvas, PixSVG, index_default as default, payload };","map":{"version":3,"names":["React2","React","QrcodeCanvas","QrcodeSVG","Component","render","createElement","props","qrcodeType","settings","value","payload","componentDidMount","onLoad","componentDidUpdate","componentWillUnmount","_PIX","padder","subject","lenght","arguments","length","undefined","target","toString","complement","Error","c","slice","EVM","ID","content","removeAccent","extra_filter","String","prototype","normalize","replace","CRC16","result","offset","charCodeAt","bitwise","toUpperCase","verifyPixKey","pixkey","test","constructor","_ref","merchant","city","cep","code","amount","ignoreErrors","_props","substring","get","prop","getPayloadFormat","constants","PAYLOAD_FORMAT","getMerchantAccount","gui","MERCHANT_ACCOUNT_GUI","key","getMerchantCategory","MERCHANT_CATEGORY_CODE","getTransactionCurrency","TRANSACTION_CURRENCY","getTransactionAmount","toFixed","getCountryCode","COUNTRY_CODE","getMerchantName","getMerchantCity","getMerchantCep","getAdditionalData","label","getInitCRC16","CRC16_LENGTH","payload2","join","PIX","pix","PixCanvas","_ref2","_","size","error","process","env","NODE_ENV","console","style","width","height","margin","display","justifyContent","alignItems","backgroundColor","border","borderRadius","borderColor","textAlign","color","fontSize","opacity","PixSVG","_ref3","index_default"],"sources":["/home/fernando/Documents/develop/www/cpvl/v4_cpvl_2025/cpvl-spa/node_modules/react-qrcode-pix/src/index.ts","/home/fernando/Documents/develop/www/cpvl/v4_cpvl_2025/cpvl-spa/node_modules/react-qrcode-pix/src/Component.class.ts","/home/fernando/Documents/develop/www/cpvl/v4_cpvl_2025/cpvl-spa/node_modules/react-qrcode-pix/src/PIX.class.ts"],"sourcesContent":["import React from 'react';\r\nimport type { QrcodeProps } from 'react-qrcode-pretty';\r\nimport Component from './Component.class';\r\nimport type { PIXProps } from './PIX.class';\r\nimport PixPayload from './PIX.class';\r\n\r\nexport * from 'react-qrcode-pretty';\r\n\r\n/**\r\n * REACT-QRCODE-PIX\r\n * \r\n * @author Guilherme Neves <guilhermeasn@yahoo.com.br>\r\n */\r\n\r\n\r\n/**\r\n * Gera o payload para poder usar no qrcode ou no sistema copia e cola do PIX\r\n */\r\nexport function payload(props : PIXProps) {\r\n\r\n    const pix = new PixPayload(props);\r\n    return pix.payload();\r\n\r\n}\r\n\r\nexport type PixCanvasComponentProps = PIXProps &\r\n  Omit<QrcodeProps<'canvas'>, 'value'> & {\r\n    onLoad?: (payload: string) => void;\r\n    children?: React.ReactNode;\r\n  };\r\n\r\nexport type PixSVGComponentProps = PIXProps &\r\n  Omit<QrcodeProps<'SVG'>, 'value'> & {\r\n    onLoad?: (payload: string) => void;\r\n    children?: React.ReactNode;\r\n  };\r\n\r\n/**\r\n * Qrcode estatico do PIX\r\n */\r\nexport function PixCanvas({\r\n    pixkey,\r\n    merchant,\r\n    city,\r\n    cep,\r\n    code,\r\n    amount,\r\n    ignoreErrors = false,\r\n    onLoad = (_ : string) => {},\r\n    ...settings\r\n}: PixCanvasComponentProps) : JSX.Element {\r\n\r\n    if(typeof settings.size === 'undefined') {\r\n      settings.size = 256;\r\n    }\r\n\r\n    try {\r\n\r\n        return React.createElement(Component<'canvas'>, {\r\n            payload: payload({ pixkey, merchant, city, cep, code, amount, ignoreErrors }),\r\n            qrcodeType: 'canvas',\r\n            settings,\r\n            onLoad\r\n        });\r\n\r\n    } catch(error) {\r\n\r\n        if(process.env.NODE_ENV !== 'test') console.error(error);\r\n\r\n        return React.createElement('div', {\r\n            style: {\r\n                width: settings?.size,\r\n                height: settings?.size,\r\n                margin: '10px 0',\r\n                display: 'flex',\r\n                justifyContent: 'center',\r\n                alignItems: 'center',\r\n                backgroundColor: '#e5d5d5',\r\n                border: 'solid 1px',\r\n                borderRadius: '10px',\r\n                borderColor: '#440000',\r\n                textAlign: 'center',\r\n                color: '#770000',\r\n                fontSize: '18px',\r\n                opacity: '0.75'\r\n            }\r\n        }, 'PIX não pode ser carregado!');\r\n\r\n    }\r\n\r\n} \r\n\r\n/**\r\n * Qrcode estatico do PIX em SVG\r\n */\r\nexport function PixSVG({\r\n    pixkey,\r\n    merchant,\r\n    city,\r\n    cep,\r\n    code,\r\n    amount,\r\n    ignoreErrors = false,\r\n    onLoad = (_ : string) => {},\r\n    ...settings\r\n}: PixSVGComponentProps) : JSX.Element {\r\n\r\n    if(typeof settings.size === 'undefined') {\r\n      settings.size = 256;\r\n    }\r\n\r\n    try {\r\n\r\n        return React.createElement(Component<'SVG'>, {\r\n            payload: payload({ pixkey, merchant, city, cep, code, amount, ignoreErrors }),\r\n            qrcodeType: 'SVG',\r\n            settings,\r\n            onLoad\r\n        });\r\n\r\n    } catch(error) {\r\n\r\n        if(process.env.NODE_ENV !== 'test') console.error(error);\r\n\r\n        return React.createElement('div', {\r\n            style: {\r\n                width: settings?.size,\r\n                height: settings?.size,\r\n                margin: '10px 0',\r\n                display: 'flex',\r\n                justifyContent: 'center',\r\n                alignItems: 'center',\r\n                backgroundColor: '#e5d5d5',\r\n                border: 'solid 1px',\r\n                borderRadius: '10px',\r\n                borderColor: '#440000',\r\n                textAlign: 'center',\r\n                color: '#770000',\r\n                fontSize: '18px',\r\n                opacity: '0.75'\r\n            }\r\n        }, 'PIX não pode ser carregado!');\r\n\r\n    }\r\n\r\n} \r\n\r\nexport default PixCanvas;\r\n","import React from 'react';\r\nimport type { QrcodeFormat, QrcodeProps } from 'react-qrcode-pretty';\r\nimport { QrcodeCanvas, QrcodeSVG } from 'react-qrcode-pretty';\r\n\r\nexport type ComponentProps<F extends QrcodeFormat> = {\r\n    settings   : Omit<QrcodeProps<F>, 'value'>,\r\n    payload    : string,\r\n    qrcodeType : QrcodeFormat\r\n    onLoad     : (payload : string) => void\r\n}\r\n\r\n/**\r\n * Component React com o QrCode para receber o payload do PIX\r\n * \r\n * @author Guilherme Neves <guilhermeasn@yahoo.com.br>\r\n */\r\nexport default class Component<F extends QrcodeFormat> extends React.Component<ComponentProps<F>> {\r\n\r\n    render() {\r\n\r\n        return React.createElement((\r\n          (this.props.qrcodeType === 'canvas' ? QrcodeCanvas : QrcodeSVG) as any\r\n        ), {\r\n            ...this.props.settings,\r\n            value: this.props.payload\r\n        });\r\n\r\n    }\r\n\r\n    componentDidMount() {\r\n\r\n        if(typeof this.props.onLoad === 'function') {\r\n            this.props.onLoad(this.props.payload || '');\r\n        }\r\n\r\n    }\r\n\r\n    componentDidUpdate() {\r\n\r\n        if(typeof this.props.onLoad === 'function') {\r\n            this.props.onLoad(this.props.payload || '');\r\n        }\r\n\r\n    }\r\n\r\n    componentWillUnmount() {\r\n\r\n        if(typeof this.props.onLoad === 'function') {\r\n            this.props.onLoad('');\r\n        }\r\n        \r\n    }\r\n\r\n}","export type PIXProps = {\r\n\r\n    /**\r\n     * Chave PIX\r\n     * \r\n     * *** Formatos validos ***\r\n     * EMAIL: fulano_da_silva.recebedor@example.com\r\n     * CPF: 12345678900\r\n     * CNPJ: 00038166000105\r\n     * TELEFONE: +5561912345678\r\n     * ALEATORIA: 123e4567-e12b-12d1-a456-426655440000\r\n     */\r\n    pixkey : string;\r\n\r\n    /**\r\n     * Nome de quem recebe o PIX\r\n     */\r\n    merchant : string;\r\n\r\n    /**\r\n     * Cidade de quem recebe o PIX\r\n     */\r\n    city : string;\r\n\r\n    /**\r\n     * CEP de quem recebe o PIX\r\n     * (optional)\r\n     */\r\n    cep ?: string | null;\r\n\r\n    /**\r\n     * Codigo para identificacao posterior do PIX\r\n     */\r\n    code ?: string;\r\n\r\n    /**\r\n     * Valor do PIX\r\n     * (opcional)\r\n     */\r\n    amount ?: number | null;\r\n\r\n    /**\r\n     * Verifica ou nao erros nas informacoes fornecidas\r\n     */\r\n    ignoreErrors ?: boolean;\r\n\r\n}\r\n\r\n/**\r\n * Classe para gerar o payload para o qrcode estatico do PIX\r\n * \r\n * @see https://www.bcb.gov.br/content/estabilidadefinanceira/spb_docs/ManualBRCode.pdf\r\n * @see https://www.bcb.gov.br/content/estabilidadefinanceira/pix/Regulamento_Pix/II_ManualdePadroesparaIniciacaodoPix.pdf\r\n * \r\n * @author Guilherme Neves <guilhermeasn@yahoo.com.br>\r\n */\r\nexport default class PIX {\r\n\r\n    /* ATRIBUTOS E METODOS ESTATICOS */\r\n\r\n    /**\r\n     * Constantes de configuracao padrao\r\n     */\r\n    public static readonly constants = {\r\n\r\n        PAYLOAD_FORMAT:         '01',\r\n        MERCHANT_ACCOUNT_GUI:   'BR.GOV.BCB.PIX',\r\n        MERCHANT_CATEGORY_CODE: '0000',\r\n        TRANSACTION_CURRENCY:   '986',\r\n        COUNTRY_CODE:           'BR',\r\n        CRC16_LENGTH:           4\r\n\r\n    }\r\n\r\n    /*\r\n     *  Adiciona zeros a esquerda quando necessario para manter derterminado comprimento\r\n     */\r\n    public static padder(subject : number | string, lenght : number = 2) : string {\r\n\r\n        const target : string = subject.toString(); \r\n        let complement : string = '';\r\n\r\n        if(target.length > lenght) {\r\n            throw new Error(`O comprimento de '${ subject }' é maior que ${ lenght }`)\r\n        }\r\n\r\n        for(let c = 0; c < lenght; c++) {\r\n            complement += '0';\r\n        }\r\n\r\n        return (complement + target).slice(target.length);\r\n\r\n    }\r\n\r\n    /**\r\n     * Padronizacao EVM Brasil QrCode\r\n     */\r\n    public static EVM(ID : number, content : string) : string {\r\n\r\n        if(ID > 99) throw new Error('O ID do EVM pode ter no máximo duas casas decimais!');\r\n        if(content.length > 99) throw new Error('O conteúdo do EVM pode ter no máximo noventa e nove caracters e espacos!'); \r\n        \r\n        return PIX.padder(ID) + PIX.padder(content.length) + content;\r\n\r\n    }\r\n\r\n    /**\r\n     * Altera ou remove caracteres acentuados e especiais \r\n     */\r\n    public static removeAccent(subject : string, extra_filter : RegExp | string = /[^\\w\\s]/gim) : string {\r\n        return !!String.prototype.normalize ? subject.normalize(\"NFD\").replace(/[\\u0300-\\u036f]/g, '').replace(extra_filter, '') : subject.replace(extra_filter, '');\r\n    }\r\n\r\n    /**\r\n     * Calcula o Checksum CRC16\r\n     */\r\n    public static CRC16(subject : string) : string {\r\n        \r\n        let result = 0xFFFF;\r\n\r\n        if(subject.length > 0) {\r\n            for(let offset = 0; offset < subject.length; offset++) {\r\n                result ^= subject.charCodeAt(offset) << 8;\r\n                for(let bitwise = 0; bitwise < 8; bitwise++) {\r\n                    if((result <<= 1) & 0x10000) result ^= 0x1021;\r\n                    result &= 0xFFFF;\r\n                }\r\n            }\r\n        }\r\n\r\n        return result.toString(16).toUpperCase();\r\n\r\n    }\r\n\r\n    /**\r\n     * Verifica se o formato da chave pix parece valido\r\n     */\r\n    public static verifyPixKey(pixkey : string) : boolean {\r\n\r\n        return (\r\n            /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/i.test(pixkey) ||  // Chave do tipo email\r\n            /^[0-9]{11}$/i.test(pixkey)                ||  // Chave do tipo CPF\r\n            /^[0-9]{14}$/i.test(pixkey)                ||  // Chave do tipo CNPJ\r\n            /^\\+[0-9]{12,13}$/i.test(pixkey)           ||  // Chave do tipo telefone\r\n            /^[\\w-]{32,36}$/i.test(pixkey)                 // Chave aleatoria\r\n        );\r\n    \r\n    }\r\n\r\n    /* ATRIBUTOS DA INSTANCIA */\r\n\r\n    private _props : Required<PIXProps>;\r\n\r\n    /* METODOS DA INSTANCIA */\r\n\r\n    /**\r\n     * Carrega os dados do PIX\r\n     */\r\n    public constructor({ pixkey, merchant, city, cep, code, amount, ignoreErrors = false } : PIXProps) {\r\n\r\n        if(!ignoreErrors) {\r\n\r\n            // Verifica os parametros obrigatorios\r\n            if(!pixkey || !merchant || !city) throw new Error('As propriedades: pixkey (chave pix), merchant (nome do recebedor) e city (cidade do recebedor), são obigatórios!');\r\n\r\n            // Verifica se a chave eh valida\r\n            if(!PIX.verifyPixKey(pixkey)) throw new Error(`A chave PIX (pixkey) '${pixkey}' parece ser inválida! Exemplos de formatos válidos: EMAIL: fulano_da_silva.recebedor@example.com | CPF: 12345678900 | CNPJ: 00038166000105 | TELEFONE: +5561912345678 | ALEATORIA: 123e4567-e12b-12d1-a456-426655440000`);\r\n\r\n             // Verifica se amount recebeu um valor valido\r\n             if(typeof amount === 'number' && amount <= 0) throw new Error('A propriedade amount deve receber um valor numérico maior que zero ou nulo!');\r\n\r\n        }\r\n\r\n        this._props = {\r\n\r\n            pixkey:   pixkey.replace(/\\s/gim, '').substring(0, 77),\r\n            merchant: PIX.removeAccent(merchant, /[^a-z\\s]/gim).substring(0, 80),\r\n            city:     PIX.removeAccent(city, /[^a-z\\s]/gim).substring(0, 80),\r\n            cep:      cep ? cep.replace(/[^0-9]/gim, '').substring(0, 8) : null,\r\n            code:     PIX.removeAccent(code || '', /[^a-z0-9]/gim).substring(0, 25).toUpperCase() || '***',\r\n            amount:   amount && amount > 0 ? amount : null,\r\n\r\n            ignoreErrors\r\n\r\n        };\r\n\r\n    }\r\n\r\n    /*\r\n     * Recupera uma propriedade da instancia\r\n     */\r\n    public get(prop : keyof PIXProps) : PIXProps[typeof prop] {\r\n        return this._props[prop];\r\n    }\r\n\r\n    /**\r\n     * Payload Format Indicator - ID 0\r\n     */\r\n    public getPayloadFormat() : string {\r\n        return PIX.EVM(0, PIX.constants.PAYLOAD_FORMAT);\r\n    }\r\n    \r\n    /**\r\n     * Merchant Account Information - ID 26\r\n     * > GUI - SubID 0\r\n     * > KEY - SubID 1\r\n     */\r\n    public getMerchantAccount() : string {\r\n\r\n        const gui = PIX.EVM(0, PIX.constants.MERCHANT_ACCOUNT_GUI);\r\n        const key = PIX.EVM(1, this._props.pixkey);\r\n\r\n        return PIX.EVM(26, gui + key);\r\n\r\n    }\r\n\r\n    /**\r\n     * Merchant Category Code - ID 52\r\n     */\r\n    public getMerchantCategory() : string {\r\n        return PIX.EVM(52, PIX.constants.MERCHANT_CATEGORY_CODE);\r\n    }\r\n\r\n    /**\r\n     * Transaction Currency - ID 53\r\n     */\r\n    public getTransactionCurrency() : string {\r\n        return PIX.EVM(53, PIX.constants.TRANSACTION_CURRENCY);\r\n    }\r\n\r\n    /**\r\n     * Transaction Amount (optional) - ID 54\r\n     */\r\n    public getTransactionAmount() : string {\r\n        return this._props.amount ? PIX.EVM(54, this._props.amount.toFixed(2)) : '';\r\n    }\r\n\r\n    /**\r\n     * Country Code - ID 58\r\n     */\r\n    public getCountryCode() : string {\r\n        return PIX.EVM(58, PIX.constants.COUNTRY_CODE);\r\n    }\r\n\r\n    /**\r\n     * Merchant Name - ID 59\r\n     */\r\n    public getMerchantName() : string {\r\n        return PIX.EVM(59, this._props.merchant);\r\n    }\r\n\r\n    /**\r\n     * Merchant City - ID 60\r\n     */\r\n    public getMerchantCity() : string {\r\n        return PIX.EVM(60, this._props.city);\r\n    }\r\n\r\n    /**\r\n     * Merchant CEP (optional) - ID 61\r\n     */\r\n    public getMerchantCep() : string {\r\n        return this._props.cep && /^[0-9]{8}$/.test(this._props.cep)\r\n            ? PIX.EVM(61, this._props.cep)\r\n            : '';\r\n    }\r\n\r\n    /**\r\n     * Additional Data Field Template - ID 62\r\n     * > Reference Label - SubID 5\r\n     */\r\n    public getAdditionalData() : string {\r\n        const label = PIX.EVM(5, this._props.code);\r\n        return PIX.EVM(62, label);\r\n    }\r\n\r\n    /**\r\n     * Init CRC16 - ID 63\r\n     */\r\n    public getInitCRC16() : string {\r\n        return '63' + PIX.padder(PIX.constants.CRC16_LENGTH);\r\n    }\r\n\r\n    /**\r\n     * Gera o payload que pode ser usado para fazer o qrcode\r\n     */\r\n    public payload() : string {\r\n\r\n        const payload = [\r\n\r\n            this.getPayloadFormat(),\r\n            this.getMerchantAccount(),\r\n            this.getMerchantCategory(),\r\n            this.getTransactionCurrency(),\r\n            this.getTransactionAmount(),\r\n            this.getCountryCode(),\r\n            this.getMerchantName(),\r\n            this.getMerchantCity(),\r\n            this.getMerchantCep(),\r\n            this.getAdditionalData(),\r\n            this.getInitCRC16()\r\n            \r\n        ].join('');\r\n\r\n        return payload + PIX.padder(PIX.CRC16(payload), PIX.constants.CRC16_LENGTH);\r\n\r\n    }\r\n\r\n    /**\r\n     * Exibe o payload\r\n     */\r\n    public toString() : string {\r\n        return this.payload();\r\n    }\r\n\r\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}