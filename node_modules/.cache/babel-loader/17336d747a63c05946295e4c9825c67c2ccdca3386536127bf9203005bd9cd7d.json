{"ast":null,"code":"var _jsxFileName = \"/home/fernando/Documents/develop/www/cpvl/v4_cpvl_2025/cpvl-spa/src/components/PaymentChechbox/PaymentCheckbox.component.tsx\",\n  _s = $RefreshSig$();\nimport { useState, useEffect } from 'react';\nimport useFetch from '../../hooks/useFetch';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const PaymentCheckbox = _ref => {\n  _s();\n  let {\n    userId\n  } = _ref;\n  const {\n    doFetch,\n    data,\n    loading\n  } = useFetch({\n    method: 'POST'\n  });\n  const [checked, setChecked] = useState(false);\n\n  // quando marcar o checkbox → insere na tabela\n  const handleChange = async () => {\n    const newChecked = !checked;\n    setChecked(newChecked);\n    if (newChecked) {\n      await doFetch({\n        url: `${process.env.REACT_APP_API_URL}/paymentMonthly`,\n        body: {\n          userId,\n          amount: 50,\n          // valor fixo ao marcar\n          ref_year: new Date().getFullYear(),\n          ref_month: new Date().getMonth() + 1,\n          type: 'mensal',\n          description: 'Pagamento manual via checkbox',\n          date: new Date()\n        },\n        method: 'POST'\n      });\n    }\n  };\n  useEffect(() => {\n    if (data && data.amount > 50) {\n      setChecked(true);\n    }\n  }, [data]);\n  return /*#__PURE__*/_jsxDEV(\"label\", {\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"checkbox\",\n      checked: checked,\n      onChange: handleChange,\n      disabled: loading\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 7\n    }, this), \"Pagamento\"]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 56,\n    columnNumber: 5\n  }, this);\n};\n_s(PaymentCheckbox, \"cW9GE38a0Rh+Eu+qBGP85B3Lh9w=\", false, function () {\n  return [useFetch];\n});\n_c = PaymentCheckbox;\nvar _c;\n$RefreshReg$(_c, \"PaymentCheckbox\");","map":{"version":3,"names":["useState","useEffect","useFetch","jsxDEV","_jsxDEV","PaymentCheckbox","_ref","_s","userId","doFetch","data","loading","method","checked","setChecked","handleChange","newChecked","url","process","env","REACT_APP_API_URL","body","amount","ref_year","Date","getFullYear","ref_month","getMonth","type","description","date","children","onChange","disabled","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/home/fernando/Documents/develop/www/cpvl/v4_cpvl_2025/cpvl-spa/src/components/PaymentChechbox/PaymentCheckbox.component.tsx"],"sourcesContent":["import { useState, useEffect } from 'react';\nimport useFetch from '../../hooks/useFetch';\nimport { useParams } from 'react-router-dom';\n\ninterface PaymentMonthly {\n  id: number;\n  userId: number;\n  amount: number;\n  ref_year: number;\n  ref_month: number;\n  type?: string;\n  description?: string;\n  date?: string;\n}\n\ninterface Props {\n  userId: number;\n}\n\nexport const PaymentCheckbox: React.FC<Props> = ({ userId }) => {\n  const { doFetch, data, loading } = useFetch<PaymentMonthly>({\n    method: 'POST',\n  });\n\n  const [checked, setChecked] = useState(false);\n\n  // quando marcar o checkbox → insere na tabela\n  const handleChange = async () => {\n    const newChecked = !checked;\n    setChecked(newChecked);\n\n    if (newChecked) {\n      await doFetch({\n        url: `${process.env.REACT_APP_API_URL}/paymentMonthly`,\n        body: {\n          userId,\n          amount: 50, // valor fixo ao marcar\n          ref_year: new Date().getFullYear(),\n          ref_month: new Date().getMonth() + 1,\n          type: 'mensal',\n          description: 'Pagamento manual via checkbox',\n          date: new Date(),\n        },\n        method: 'POST',\n      });\n    }\n  };\n\n  useEffect(() => {\n    if (data && data.amount > 50) {\n      setChecked(true);\n    }\n  }, [data]);\n\n  return (\n    <label>\n      <input\n        type=\"checkbox\"\n        checked={checked}\n        onChange={handleChange}\n        disabled={loading}\n      />\n      Pagamento\n    </label>\n  );\n};\n\n"],"mappings":";;AAAA,SAASA,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAC3C,OAAOC,QAAQ,MAAM,sBAAsB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAkB5C,OAAO,MAAMC,eAAgC,GAAGC,IAAA,IAAgB;EAAAC,EAAA;EAAA,IAAf;IAAEC;EAAO,CAAC,GAAAF,IAAA;EACzD,MAAM;IAAEG,OAAO;IAAEC,IAAI;IAAEC;EAAQ,CAAC,GAAGT,QAAQ,CAAiB;IAC1DU,MAAM,EAAE;EACV,CAAC,CAAC;EAEF,MAAM,CAACC,OAAO,EAAEC,UAAU,CAAC,GAAGd,QAAQ,CAAC,KAAK,CAAC;;EAE7C;EACA,MAAMe,YAAY,GAAG,MAAAA,CAAA,KAAY;IAC/B,MAAMC,UAAU,GAAG,CAACH,OAAO;IAC3BC,UAAU,CAACE,UAAU,CAAC;IAEtB,IAAIA,UAAU,EAAE;MACd,MAAMP,OAAO,CAAC;QACZQ,GAAG,EAAE,GAAGC,OAAO,CAACC,GAAG,CAACC,iBAAiB,iBAAiB;QACtDC,IAAI,EAAE;UACJb,MAAM;UACNc,MAAM,EAAE,EAAE;UAAE;UACZC,QAAQ,EAAE,IAAIC,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC,CAAC;UAClCC,SAAS,EAAE,IAAIF,IAAI,CAAC,CAAC,CAACG,QAAQ,CAAC,CAAC,GAAG,CAAC;UACpCC,IAAI,EAAE,QAAQ;UACdC,WAAW,EAAE,+BAA+B;UAC5CC,IAAI,EAAE,IAAIN,IAAI,CAAC;QACjB,CAAC;QACDZ,MAAM,EAAE;MACV,CAAC,CAAC;IACJ;EACF,CAAC;EAEDX,SAAS,CAAC,MAAM;IACd,IAAIS,IAAI,IAAIA,IAAI,CAACY,MAAM,GAAG,EAAE,EAAE;MAC5BR,UAAU,CAAC,IAAI,CAAC;IAClB;EACF,CAAC,EAAE,CAACJ,IAAI,CAAC,CAAC;EAEV,oBACEN,OAAA;IAAA2B,QAAA,gBACE3B,OAAA;MACEwB,IAAI,EAAC,UAAU;MACff,OAAO,EAAEA,OAAQ;MACjBmB,QAAQ,EAAEjB,YAAa;MACvBkB,QAAQ,EAAEtB;IAAQ;MAAAuB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACnB,CAAC,aAEJ;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAO,CAAC;AAEZ,CAAC;AAAC9B,EAAA,CA9CWF,eAAgC;EAAA,QACRH,QAAQ;AAAA;AAAAoC,EAAA,GADhCjC,eAAgC;AAAA,IAAAiC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}