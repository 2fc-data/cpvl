{"ast":null,"code":"var _jsxFileName = \"/home/fernando/Documents/develop/www/cpvl/v4_cpvl_2025/cpvl-spa/src/components/PaymentMonthly/PaymentMonthly.component.tsx\";\nimport { Box, Typography, Card, CardContent, Grid } from '@mui/material';\nimport { blue } from '@mui/material/colors';\n// import { useEffect, useState } from 'react';\n// import { useFetch } from '../../hooks';\n// import { API, getURI } from '../../services';\n\n// interface IPaymentMonthly {\n//   id?: number;\n//   userId: number;\n//   ref_year: number;\n//   ref_month: number;\n//   amount: number | string;\n//   type: string;\n//   Description: string;\n//   date: Date | string;\n// }\n\n// interface PaymentMonthlyProps {\n//   userId: string;\n// }\n\n// export const PaymentMonthly: React.FC<PaymentMonthlyProps> = ({ userId }) => {\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport const PaymentMonthly = () => {\n  // console.log('--> PaymentMonthly userId:', userId);\n  // const [payments, setPayments] = useState<IPaymentMonthly[]>([]);\n\n  // // Validate userId and construct API URL\n  // const isUserIdValid = userId && !isNaN(parseInt(userId));\n  // const apiUrl = isUserIdValid\n  //   ? getURI(`${API.paymentMonthly}?userId=${userId}`)\n  //   : undefined;\n  // console.log('--> API URL:', apiUrl); // Debug API URL\n\n  // // Fetch payments\n  // const {\n  //   data: paymentsData,\n  //   error: paymentsError,\n  //   loading: paymentsLoading\n  // } = useFetch<IPaymentMonthly[]>({\n  //   method: 'GET',\n  //   url: apiUrl\n  // });\n\n  // useEffect(() => {\n  //   console.log('--> paymentsData:', paymentsData);\n  //   console.log('--> paymentsError:', paymentsError);\n  //   if (paymentsData) {\n  //     setPayments(Array.isArray(paymentsData) ? paymentsData : []);\n  //   } else if (paymentsError) {\n  //     setPayments([]); // Clear payments on error\n  //   }\n  // }, [paymentsData, paymentsError]);\n\n  // Format month\n  // const formatMonth = (month: number) => {\n  //   const months = [\n  //     'Janeiro',\n  //     'Fevereiro',\n  //     'Março',\n  //     'Abril',\n  //     'Maio',\n  //     'Junho',\n  //     'Julho',\n  //     'Agosto',\n  //     'Setembro',\n  //     'Outubro',\n  //     'Novembro',\n  //     'Dezembro'\n  //   ];\n  //   return months[month - 1] || `Mês ${month}`;\n  // };\n\n  // // Parse amount\n  // const parseAmount = (amount: any): number => {\n  //   if (!amount || amount === '') return 0;\n  //   if (typeof amount === 'number') return amount;\n  //   try {\n  //     return parseFloat(amount.toString().replace(',', '.'));\n  //   } catch (error) {\n  //     console.error('Error parsing amount:', amount, error);\n  //     return 0;\n  //   }\n  // };\n\n  // // Calculate financial summary\n  // const getFinancialSummary = () => {\n  //   const totalAmount = payments.reduce(\n  //     (sum, p) => sum + parseAmount(p.amount),\n  //     0\n  //   );\n\n  //   const monthlyStatus = payments\n  //     .sort((a, b) => b.ref_year - a.ref_year || b.ref_month - a.ref_month)\n  //     .map((payment) => ({\n  //       year: payment.ref_year,\n  //       month: payment.ref_month,\n  //       monthName: formatMonth(payment.ref_month),\n  //       amount: parseAmount(payment.amount),\n  //       type: payment.type || 'N/A',\n  //       description: payment.Description || 'N/A',\n  //       date: payment.date\n  //     }));\n\n  //   return {\n  //     total: payments.length,\n  //     totalAmount,\n  //     monthlyStatus\n  //   };\n  // };\n\n  // const financialSummary = getFinancialSummary();\n\n  // // Render invalid userId error\n  // if (!isUserIdValid) {\n  //   console.error('Invalid userId:', userId);\n  //   return (\n  //     <Alert severity=\"error\">\n  //       ID de usuário inválido. Por favor, forneça um ID válido.\n  //     </Alert>\n  //   );\n  // }\n\n  // // Render loading state\n  // if (paymentsLoading) {\n  //   return (\n  //     <Box display=\"flex\" justifyContent=\"center\" p={3}>\n  //       <CircularProgress />\n  //     </Box>\n  //   );\n  // }\n\n  // // Render error state\n  // if (paymentsError) {\n  //   let errorMessage = 'Erro ao carregar histórico de pagamentos.';\n  //   if (paymentsError.message.includes('not valid JSON')) {\n  //     errorMessage =\n  //       'Erro: A resposta do servidor não é um JSON válido. Verifique a configuração da API.';\n  //   } else if (paymentsError.message === 'Unauthorized') {\n  //     errorMessage = 'Acesso não autorizado. Por favor, faça login novamente.';\n  //   } else if (paymentsError.message === 'Forbidden resource') {\n  //     errorMessage =\n  //       'Acesso proibido. Você não tem permissão para visualizar esses dados.';\n  //   } else if (paymentsError.message) {\n  //     errorMessage += ` Detalhes: ${paymentsError.message}`;\n  //   }\n  //   return (\n  //     <Alert severity=\"error\">\n  //       {errorMessage} Tente novamente mais tarde ou contate o suporte.\n  //     </Alert>\n  //   );\n  // }\n\n  // // Render empty state\n  // if (payments.length === 0) {\n  //   return (\n  //     <Alert severity=\"info\">\n  //       Nenhum registro de pagamento encontrado para este piloto.\n  //     </Alert>\n  //   );\n  // }\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Card, {\n      children: /*#__PURE__*/_jsxDEV(CardContent, {\n        children: [/*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"h6\",\n          gutterBottom: true,\n          color: \"primary\",\n          children: \"Resumo Financeiro\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 183,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Box, {\n          mt: 2,\n          children: /*#__PURE__*/_jsxDEV(Grid, {\n            container: true,\n            spacing: 2,\n            children: /*#__PURE__*/_jsxDEV(Grid, {\n              item: true,\n              xs: 12,\n              children: /*#__PURE__*/_jsxDEV(Box, {\n                textAlign: \"center\",\n                p: 2,\n                bgcolor: blue[50],\n                borderRadius: 2,\n                children: [/*#__PURE__*/_jsxDEV(Typography, {\n                  variant: \"h5\",\n                  color: blue[600],\n                  children: \"R$\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 195,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(Typography, {\n                  variant: \"body2\",\n                  color: \"textSecondary\",\n                  children: \"Valor Total\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 199,\n                  columnNumber: 19\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 189,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 188,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 187,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 186,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Box, {\n          mt: 3,\n          children: /*#__PURE__*/_jsxDEV(Typography, {\n            variant: \"subtitle1\",\n            gutterBottom: true,\n            color: \"primary\",\n            children: \"Status dos \\xDAltimos Meses\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 207,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 206,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 182,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 181,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Card, {\n      elevation: 3\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 250,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n_c = PaymentMonthly;\nvar _c;\n$RefreshReg$(_c, \"PaymentMonthly\");","map":{"version":3,"names":["Box","Typography","Card","CardContent","Grid","blue","jsxDEV","_jsxDEV","Fragment","_Fragment","PaymentMonthly","children","variant","gutterBottom","color","fileName","_jsxFileName","lineNumber","columnNumber","mt","container","spacing","item","xs","textAlign","p","bgcolor","borderRadius","elevation","_c","$RefreshReg$"],"sources":["/home/fernando/Documents/develop/www/cpvl/v4_cpvl_2025/cpvl-spa/src/components/PaymentMonthly/PaymentMonthly.component.tsx"],"sourcesContent":["import { Payment as PaymentIcon } from '@mui/icons-material';\nimport {\n  Box,\n  Typography,\n  Card,\n  CardContent,\n  Grid,\n  Chip,\n  Alert,\n  Table,\n  TableBody,\n  TableCell,\n  TableContainer,\n  TableHead,\n  TableRow,\n  Paper,\n  CircularProgress\n} from '@mui/material';\nimport { blue } from '@mui/material/colors';\n// import { useEffect, useState } from 'react';\n// import { useFetch } from '../../hooks';\n// import { API, getURI } from '../../services';\n\n// interface IPaymentMonthly {\n//   id?: number;\n//   userId: number;\n//   ref_year: number;\n//   ref_month: number;\n//   amount: number | string;\n//   type: string;\n//   Description: string;\n//   date: Date | string;\n// }\n\n// interface PaymentMonthlyProps {\n//   userId: string;\n// }\n\n// export const PaymentMonthly: React.FC<PaymentMonthlyProps> = ({ userId }) => {\nexport const PaymentMonthly = () => {\n  // console.log('--> PaymentMonthly userId:', userId);\n  // const [payments, setPayments] = useState<IPaymentMonthly[]>([]);\n\n  // // Validate userId and construct API URL\n  // const isUserIdValid = userId && !isNaN(parseInt(userId));\n  // const apiUrl = isUserIdValid\n  //   ? getURI(`${API.paymentMonthly}?userId=${userId}`)\n  //   : undefined;\n  // console.log('--> API URL:', apiUrl); // Debug API URL\n\n  // // Fetch payments\n  // const {\n  //   data: paymentsData,\n  //   error: paymentsError,\n  //   loading: paymentsLoading\n  // } = useFetch<IPaymentMonthly[]>({\n  //   method: 'GET',\n  //   url: apiUrl\n  // });\n\n  // useEffect(() => {\n  //   console.log('--> paymentsData:', paymentsData);\n  //   console.log('--> paymentsError:', paymentsError);\n  //   if (paymentsData) {\n  //     setPayments(Array.isArray(paymentsData) ? paymentsData : []);\n  //   } else if (paymentsError) {\n  //     setPayments([]); // Clear payments on error\n  //   }\n  // }, [paymentsData, paymentsError]);\n\n  // Format month\n  // const formatMonth = (month: number) => {\n  //   const months = [\n  //     'Janeiro',\n  //     'Fevereiro',\n  //     'Março',\n  //     'Abril',\n  //     'Maio',\n  //     'Junho',\n  //     'Julho',\n  //     'Agosto',\n  //     'Setembro',\n  //     'Outubro',\n  //     'Novembro',\n  //     'Dezembro'\n  //   ];\n  //   return months[month - 1] || `Mês ${month}`;\n  // };\n\n  // // Parse amount\n  // const parseAmount = (amount: any): number => {\n  //   if (!amount || amount === '') return 0;\n  //   if (typeof amount === 'number') return amount;\n  //   try {\n  //     return parseFloat(amount.toString().replace(',', '.'));\n  //   } catch (error) {\n  //     console.error('Error parsing amount:', amount, error);\n  //     return 0;\n  //   }\n  // };\n\n  // // Calculate financial summary\n  // const getFinancialSummary = () => {\n  //   const totalAmount = payments.reduce(\n  //     (sum, p) => sum + parseAmount(p.amount),\n  //     0\n  //   );\n\n  //   const monthlyStatus = payments\n  //     .sort((a, b) => b.ref_year - a.ref_year || b.ref_month - a.ref_month)\n  //     .map((payment) => ({\n  //       year: payment.ref_year,\n  //       month: payment.ref_month,\n  //       monthName: formatMonth(payment.ref_month),\n  //       amount: parseAmount(payment.amount),\n  //       type: payment.type || 'N/A',\n  //       description: payment.Description || 'N/A',\n  //       date: payment.date\n  //     }));\n\n  //   return {\n  //     total: payments.length,\n  //     totalAmount,\n  //     monthlyStatus\n  //   };\n  // };\n\n  // const financialSummary = getFinancialSummary();\n\n  // // Render invalid userId error\n  // if (!isUserIdValid) {\n  //   console.error('Invalid userId:', userId);\n  //   return (\n  //     <Alert severity=\"error\">\n  //       ID de usuário inválido. Por favor, forneça um ID válido.\n  //     </Alert>\n  //   );\n  // }\n\n  // // Render loading state\n  // if (paymentsLoading) {\n  //   return (\n  //     <Box display=\"flex\" justifyContent=\"center\" p={3}>\n  //       <CircularProgress />\n  //     </Box>\n  //   );\n  // }\n\n  // // Render error state\n  // if (paymentsError) {\n  //   let errorMessage = 'Erro ao carregar histórico de pagamentos.';\n  //   if (paymentsError.message.includes('not valid JSON')) {\n  //     errorMessage =\n  //       'Erro: A resposta do servidor não é um JSON válido. Verifique a configuração da API.';\n  //   } else if (paymentsError.message === 'Unauthorized') {\n  //     errorMessage = 'Acesso não autorizado. Por favor, faça login novamente.';\n  //   } else if (paymentsError.message === 'Forbidden resource') {\n  //     errorMessage =\n  //       'Acesso proibido. Você não tem permissão para visualizar esses dados.';\n  //   } else if (paymentsError.message) {\n  //     errorMessage += ` Detalhes: ${paymentsError.message}`;\n  //   }\n  //   return (\n  //     <Alert severity=\"error\">\n  //       {errorMessage} Tente novamente mais tarde ou contate o suporte.\n  //     </Alert>\n  //   );\n  // }\n\n  // // Render empty state\n  // if (payments.length === 0) {\n  //   return (\n  //     <Alert severity=\"info\">\n  //       Nenhum registro de pagamento encontrado para este piloto.\n  //     </Alert>\n  //   );\n  // }\n\n  return (\n    <>\n      <Card >\n        <CardContent >\n          <Typography variant=\"h6\" gutterBottom color=\"primary\">\n            Resumo Financeiro\n          </Typography>\n          <Box mt={2}>\n            <Grid container spacing={2}>\n              <Grid item xs={12}>\n                <Box\n                  textAlign=\"center\"\n                  p={2}\n                  bgcolor={blue[50]}\n                  borderRadius={2}\n                >\n                  <Typography variant=\"h5\" color={blue[600]}>\n                    R$ \n                    {/* {financialSummary.totalAmount.toFixed(2)} */}\n                  </Typography>\n                  <Typography variant=\"body2\" color=\"textSecondary\">\n                    Valor Total\n                  </Typography>\n                </Box>\n              </Grid>\n            </Grid>\n          </Box>\n          <Box mt={3}>\n            <Typography variant=\"subtitle1\" gutterBottom color=\"primary\">\n              Status dos Últimos Meses\n            </Typography>\n            {/* <Box display=\"flex\" flexWrap=\"wrap\" gap={1}>\n              {financialSummary.monthlyStatus\n                .slice(0, 12)\n                .map((month, index) => (\n                  <Chip\n                    key={`${month.year}-${month.month}`}\n                    label={`${month.monthName.substring(0, 3)}/${month.year}`}\n                    size=\"small\"\n                    sx={{\n                      backgroundColor: blue[100],\n                      color: blue[800],\n                      '&:hover': {\n                        backgroundColor: blue[200]\n                      }\n                    }}\n                    title={`${month.monthName} ${\n                      month.year\n                    } - R$ ${month.amount.toFixed(2)}`}\n                  />\n                ))}\n            </Box>\n            {financialSummary.monthlyStatus.length > 12 && (\n              <Typography\n                variant=\"caption\"\n                color=\"textSecondary\"\n                sx={{ mt: 1, display: 'block' }}\n              >\n                Mostrando os 12 meses mais recentes de {financialSummary.total}{' '}\n                registros\n              </Typography>\n            )}\n            {financialSummary.monthlyStatus.length === 0 && (\n              <Alert severity=\"info\" sx={{ mt: 1 }}>\n                Nenhum registro encontrado.\n              </Alert>\n            )} */}\n          </Box>\n        </CardContent>\n      </Card>\n      \n      <Card elevation={3}>\n        {/* <CardContent>\n          <Box display=\"flex\" alignItems=\"center\" mb={3}>\n            <PaymentIcon sx={{ fontSize: 32, color: blue[500], mr: 2 }} />\n            <Typography variant=\"h5\" component=\"h2\">\n              Histórico de Pagamentos\n            </Typography>\n          </Box>\n          <TableContainer component={Paper} elevation={0}>\n            <Table>\n              <TableHead>\n                <TableRow>\n                  <TableCell>\n                    <strong>Período</strong>\n                  </TableCell>\n                  <TableCell>\n                    <strong>Tipo</strong>\n                  </TableCell>\n                  <TableCell>\n                    <strong>Valor</strong>\n                  </TableCell>\n                  <TableCell>\n                    <strong>Descrição</strong>\n                  </TableCell>\n                  <TableCell>\n                    <strong>Data</strong>\n                  </TableCell>\n                </TableRow>\n              </TableHead>\n              <TableBody>\n                {payments\n                  .sort(\n                    (a, b) =>\n                      b.ref_year - a.ref_year || b.ref_month - a.ref_month\n                  )\n                  .map((payment, index) => (\n                    <TableRow key={`${payment.id || index}`} hover>\n                      <TableCell>\n                        <Typography variant=\"body2\">\n                          {formatMonth(payment.ref_month)} {payment.ref_year}\n                        </Typography>\n                      </TableCell>\n                      <TableCell>\n                        {payment.type ? (\n                          <Chip\n                            label={payment.type}\n                            size=\"small\"\n                            variant=\"outlined\"\n                          />\n                        ) : (\n                          <Typography variant=\"body2\" color=\"textSecondary\">\n                            -\n                          </Typography>\n                        )}\n                      </TableCell>\n                      <TableCell>\n                        <Typography variant=\"body2\" fontWeight=\"bold\">\n                          R$ {parseAmount(payment.amount).toFixed(2)}\n                        </Typography>\n                      </TableCell>\n                      <TableCell>\n                        <Typography variant=\"body2\">\n                          {payment.Description &&\n                          payment.Description.trim() !== ''\n                            ? payment.Description\n                            : '-'}\n                        </Typography>\n                      </TableCell>\n                      <TableCell>\n                        <Typography variant=\"body2\">\n                          {payment.date\n                            ? new Date(payment.date).toLocaleDateString('pt-BR')\n                            : '-'}\n                        </Typography>\n                      </TableCell>\n                    </TableRow>\n                  ))}\n              </TableBody>\n            </Table>\n          </TableContainer>\n        </CardContent> */}\n      </Card>\n    </>\n  );\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}